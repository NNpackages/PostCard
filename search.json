[{"path":"https://nnpackages.github.io/PostCard/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Postcard authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"controlling-verbosity","dir":"Articles","previous_headings":"","what":"Controlling verbosity","title":"More details on usage of package","text":"See package level options documentation options(), giving information change package behavior options environmental variables. option verbose, controls amount information printed console. default, verbose = 2, meaning various information printed throughout algorithm. Change verbose = 1 little less information verbose = 0 information Throughout examples vignette, visible kind information printed user.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"plug-in-estimation-of-marginal-effects-and-variance-estimation-using-influence-functions","dir":"Articles","previous_headings":"","what":"Plug-in estimation of marginal effects and variance estimation using influence functions","title":"More details on usage of package","text":"README examples, simulate data using glm_data() function package.","code":"n <- 1000 b0 <- 1 b1 <- 3 b2 <- 2  # Simulate data with a non-linear effect dat_pois <- glm_data(   b0+b1*sin(W)^2+b2*A,   W = runif(n, min = -2, max = 2),   A = rbinom(n, 1, .5),   family = poisson(link = \"log\") # Default value )"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"changing-the-estimand","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Changing the estimand","title":"More details on usage of package","text":"default estimand_fun rctglm() rctglm_with_prognosticscore() average treatment effect (ATE). However, ’s possible specify estimand.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"built-in-estimands---average-treatment-effect-and-rate-ratio","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Changing the estimand","what":"Built-in estimands - average treatment effect and rate ratio","title":"More details on usage of package","text":"Built ATE rate ratio, can specified character strings. apparent documentation rctglm() rctglm_with_prognosticscore(), default estimand_fun \"ate\", similarly user can specify estimand_fun = \"ratio_ratio\" use estimand function psi1 / psi0 seen :","code":"rate_ratio <- rctglm(   formula = Y ~ A + W,   group_indicator = A,   data = dat_pois,   family = \"poisson\",   estimand_fun = \"rate_ratio\") #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.501 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1/psi0' with respect to 'psi0' as: '-(psi1/psi0^2)'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1/psi0' with respect to 'psi1' as: '1/psi0'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1` rate_ratio #>  #> Object of class rctglm  #>  #> Call:  rctglm(formula = Y ~ A + W, group_indicator = A, family = \"poisson\",  #>     data = dat_pois, estimand_fun = \"rate_ratio\") #>  #> Counterfactual control mean (psi_0=E[Y|X, A=0]) estimate: 25.47 #> Counterfactual control mean (psi_1=E[Y|X, A=1]) estimate: 197.9 #> Estimand function r: psi1/psi0 #> Estimand (r(psi_1, psi_0)) estimate (SE): 7.769 (0.03216)"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"specifying-any-estimand","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Changing the estimand","what":"Specifying any estimand","title":"More details on usage of package","text":"’s possible specify function 2 named arguments, psi0 psi1, estimand function estimand_fun. example showing estimand function can specified. Note information printed console automatic differentiation performed estimand_fun, used calculation influence function marginal effect.","code":"nonsense_estimand_fun <- function(psi1, psi0) {   psi1 / sqrt(psi0) * 2 - 1 }  nonsense_estimand <- rctglm(   formula = Y ~ A * W,   group_indicator = A,   data = dat_pois,   family = poisson(),   estimand_fun = nonsense_estimand_fun,   verbose = 0) nonsense_estimand #>  #> Object of class rctglm  #>  #> Call:  rctglm(formula = Y ~ A * W, group_indicator = A, family = poisson(),  #>     data = dat_pois, estimand_fun = nonsense_estimand_fun, verbose = 0) #>  #> Counterfactual control mean (psi_0=E[Y|X, A=0]) estimate: 25.41 #> Counterfactual control mean (psi_1=E[Y|X, A=1]) estimate: 197.8 #> Estimand function r: { #>     psi1/sqrt(psi0) * 2 - 1 #> } #> Estimand (r(psi_1, psi_0)) estimate (SE): 77.5 (0.9047)"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"prognostic-covariate-adjustment","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Prognostic covariate adjustment","title":"More details on usage of package","text":"rctglm_with_prognosticscore() uses function fit_best_learner() fit prognostic model historical data, data_hist. Thereafter, model used predict prognostic scores observations data using scores covariate performing plug-etimation GLM using rctglm. default behavior fit_best_learner() subsequently rctglm_with_prognosticscore() fit discrete super learner (discrete avoid overfitting) finding model lowest RMSE among linear regression, Multivariate adaptive regression spline (MARS) boosted trees. algorithm uses default 5 folds cross validation tries construct formula used prognostic model modelling response design matrix containing intercept main effect variables historical data, data_hist.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"specifying-learners","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Prognostic covariate adjustment","what":"Specifying learners","title":"More details on usage of package","text":"’s easy user specify learners train order fit discrete super learner. package utilises framework tidymodels. user needs specify list models.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"code-used-for-default-learners","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Prognostic covariate adjustment > Specifying learners","what":"Code used for default learners","title":"More details on usage of package","text":"illustrate, code unexported function default_learners creates list default learners:","code":"PostCard:::default_learners #> function ()  #> { #>     list(mars = list(model = parsnip::mars(mode = \"regression\",  #>         prod_degree = 3) %>% parsnip::set_engine(\"earth\"), grid = NULL),  #>         lm = list(model = parsnip::linear_reg() %>% parsnip::set_engine(\"lm\"),  #>             grid = NULL), gbt = list(model = parsnip::boost_tree(mode = \"regression\",  #>             trees = parsnip::tune(\"trees\"), tree_depth = parsnip::tune(\"tree_depth\"),  #>             learn_rate = 0.1) %>% parsnip::set_engine(\"xgboost\"),  #>             grid = data.frame(trees = seq(from = 25, to = 500,  #>                 by = 25), tree_depth = 3))) #> } #> <bytecode: 0x55f4d6b31130> #> <environment: namespace:PostCard>"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"creating-own-list-of-learners","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Prognostic covariate adjustment > Specifying learners","what":"Creating own list of learners","title":"More details on usage of package","text":"first simulate data run example listing models available tidymodels website, user can specify list models along specified values parameters learners argument.","code":"# Generate some data n <- 1000 b0 <- 1 b1 <- 1.5 b2 <- 2 W_sim <- runif(n, min = -2, max = 2)  dat_treat <- glm_data(   b0+b1*abs(sin(W))+b2*A,   W = W_sim,   A = rbinom (n, 1, .5) )  dat_notreat <- glm_data(   b0+b1*abs(sin(W)),   W = W_sim ) learners <- list(   rf = list(     model = parsnip::rand_forest(       mode = \"regression\",       trees = 500,       min_n = 5     ) %>%        parsnip::set_engine(\"ranger\")   ),   svm.linear = list(     model = parsnip::svm_linear(       mode = \"regression\",       cost = 1,       margin = 0.1) %>%      parsnip::set_engine(\"LiblineaR\")   ) )  model_own_learners <- rctglm_with_prognosticscore(   formula = Y ~ A * W,   group_indicator = A,   data = dat_treat,   family = gaussian(),   data_hist = dat_notreat,   learners = learners) #>  #> ── Fitting prognostic model ── #>  #> ℹ Created formula for fitting prognostic model as: Y ~ . #> ℹ Fitting learners #> • mod_rf #> • mod_svm.linear #> i  No tuning parameters. `fit_resamples()` will be attempted #> i 1 of 2 resampling: mod_rf #> ✔ 1 of 2 resampling: mod_rf (1.4s) #> i  No tuning parameters. `fit_resamples()` will be attempted #> i 2 of 2 resampling: mod_svm.linear #> ✔ 2 of 2 resampling: mod_svm.linear (113ms) #> ℹ Model with lowest RMSE: mod_svm.linear #> ℹ Investigate trained learners and fitted model in `prognostic_info` list element #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.529 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi0' as: '-1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi1' as: '1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"investigating-the-prognostic-model","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Prognostic covariate adjustment","what":"Investigating the prognostic model","title":"More details on usage of package","text":"’s possible view information regarding fit prognostic model rctglm class object rctglm_with_prognosticscore() returns looking list element prognostic_info. Inside list element elements model_fit: result fit_best_learner() learners: list learners used cv_folds: number folds used cross validation","code":"model_own_learners$prognostic_info #> $formula #> Y ~ . #> <environment: 0x55f4d7105d08> #>  #> $model_fit #> ══ Workflow [trained] ══════════════════════════════════════════════════════════ #> Preprocessor: Formula #> Model: svm_linear() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> Y ~ . #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> $TypeDetail #> [1] \"L2-regularized L2-loss support vector regression primal (L2R_L2LOSS_SVR)\" #>  #> $Type #> [1] 11 #>  #> $W #>                W     Bias #> [1,] 0.008079305 2.087292 #>  #> $Bias #> [1] 1 #>  #> $NbClass #> [1] 2 #>  #> attr(,\"class\") #> [1] \"LiblineaR\" #>  #> $learners #> $learners$rf #> $learners$rf$model #> Random Forest Model Specification (regression) #>  #> Main Arguments: #>   trees = 500 #>   min_n = 5 #>  #> Computational engine: ranger  #>  #>  #>  #> $learners$svm.linear #> $learners$svm.linear$model #> Linear Support Vector Machine Model Specification (regression) #>  #> Main Arguments: #>   cost = 1 #>   margin = 0.1 #>  #> Computational engine: LiblineaR  #>  #>  #>  #>  #> $cv_folds #> [1] 5 #>  #> $data #>                Y             W #> 1     1.33459449  0.8328956943 #> 2     1.87535394  0.6499686604 #> 3     1.91332933  1.0646921853 #> 4     1.63028637 -1.0370517494 #> 5     2.24699475  1.1614561733 #> 6     3.13448257 -0.9970232164 #> 7     3.16113273  1.0432445994 #> 8    -0.22217940 -0.2975790575 #> 9     2.75184640  0.6214957880 #> 10    0.98273105  0.4718765644 #> 11    2.85672416  1.6617873032 #> 12    0.98849258  1.3499910524 #> 13    2.74873381 -0.0286575519 #> 14    0.92184945 -1.5481082005 #> 15    3.63842109  1.2785413526 #> 16    3.02546676 -0.0415973207 #> 17    1.23803256  0.1411892837 #> 18    1.61351184  0.8164076256 #> 19    2.06657995 -0.6405583369 #> 20    2.94478687 -1.8011703258 #> 21    0.76458927 -0.3808752326 #> 22    1.95953524 -0.5365767218 #> 23    4.29561110 -0.9354170831 #> 24    3.05235912  1.6944931764 #> 25    2.41763071 -1.2675301926 #> 26    3.68108230  1.6761789052 #> 27    0.08025783 -0.3896288192 #> 28    0.62769779 -0.1350198127 #> 29    2.45777232  1.1910800263 #> 30    4.20472127  1.5513671776 #> 31    3.06912748 -1.3788010655 #> 32    4.26426305 -1.7106985534 #> 33    2.44432587 -1.7231086465 #> 34    1.44784054 -1.1827477319 #> 35    2.23712923 -1.4806237696 #> 36    3.25299889  1.3161092913 #> 37    0.70130216  0.2251634104 #> 38    0.99278991 -1.2024145983 #> 39    3.29666065  1.3098467123 #> 40    3.01698823  1.7099417690 #> 41    3.23506404  1.2052737745 #> 42    2.07263519  1.7780998852 #> 43    3.42749337  1.9085938791 #> 44    2.32744582 -0.2268192442 #> 45    1.87928498 -0.5582520645 #> 46    2.85843524 -0.6960527943 #> 47    2.57973296 -1.7351368833 #> 48    2.46084420 -0.9404216567 #> 49    1.33866505  1.9682457037 #> 50    2.79248332  1.5009245714 #> 51    1.88917421 -0.0044021858 #> 52    1.70059738  1.1414582077 #> 53    0.93351293  0.6846071156 #> 54    1.57017090 -0.4238011017 #> 55    2.15117160  1.3299497822 #> 56    2.25519947  0.4641606733 #> 57   -0.45613959 -0.1800597506 #> 58    3.13864411  0.7861383250 #> 59    3.70445108  1.2379680034 #> 60    2.82294549  1.7303225351 #> 61    3.28300923  1.0360004017 #> 62    2.63872368  1.4933974249 #> 63    2.72995608  1.3436550125 #> 64    2.45259537  1.9722758690 #> 65    2.13342112  1.7313509146 #> 66    1.12695589  1.6173001770 #> 67    2.56579731 -1.0450610397 #> 68    3.23461615 -0.8105420712 #> 69    1.95540489  1.3753501633 #> 70    4.72945859  0.8891819092 #> 71    0.80332910  0.6587312073 #> 72    0.12339392 -1.9163986286 #> 73    0.35481324 -0.4396142028 #> 74    2.30551981 -0.9288332947 #> 75    1.10181889  0.3048685715 #> 76    2.78420834 -1.2031684229 #> 77    2.11228550 -1.4616466910 #> 78    2.62440224 -1.0230007041 #> 79    1.62984328 -1.7741118418 #> 80    1.06677819  1.7714652652 #> 81    2.62609190 -0.4764007796 #> 82    4.30882278  1.3764594328 #> 83    2.89691386 -1.8228546558 #> 84    1.02698761  1.6036174204 #> 85    1.72466884  0.2339219134 #> 86    3.38241047  1.4302500207 #> 87    2.54108766  0.5469675139 #> 88    3.56567148 -1.0060400469 #> 89    2.69295510  1.1066364627 #> 90    2.46470960 -1.0478901258 #> 91    2.42005431 -1.3306815689 #> 92    1.25726203 -1.6214439226 #> 93    1.70798894  0.2731963526 #> 94    1.29746049 -1.3709697891 #> 95    2.30312452  0.2484092182 #> 96    1.62842010  0.0151326815 #> 97    0.93658076 -0.4190991297 #> 98    3.22613524 -1.1355415555 #> 99    2.71111168  1.5004313178 #> 100   2.46935273  0.4779586094 #> 101   1.57055925 -1.2259032587 #> 102   3.51417549 -1.6791446479 #> 103   1.87891861  1.1706680236 #> 104   2.60517175 -1.2885093950 #> 105   3.03173444 -0.0423723040 #> 106   0.52745403  0.6650652559 #> 107   2.75338740 -0.5712016597 #> 108   3.73190273  0.8419829840 #> 109   2.75743233  1.0899812467 #> 110   2.29975537  1.2998597994 #> 111   1.69692025 -1.9481891524 #> 112   2.51198126  0.7288927492 #> 113   2.53733378  1.4125720803 #> 114  -0.88705517  0.0013774354 #> 115   1.52153233 -1.9322044272 #> 116   3.24892663 -0.6350371838 #> 117  -0.90309103  0.3543365747 #> 118   4.28895926  1.3117883354 #> 119   0.88236071 -0.2159648649 #> 120   0.86258877  1.3856586497 #> 121   1.66061379 -1.4772010120 #> 122   1.87376385 -0.8068301473 #> 123   2.24324123  0.7541863667 #> 124   1.34887451 -1.5825753296 #> 125   1.34765935  0.3847826337 #> 126   3.22017705 -0.6959245605 #> 127   1.64820497 -0.6197343776 #> 128   2.68053032 -1.3385034334 #> 129   4.49594420  1.7027692907 #> 130   2.95065869  0.7794442950 #> 131   4.51969201  1.4624328166 #> 132   1.36433413  0.8616876332 #> 133   2.57305295  1.4711910766 #> 134   1.16999016 -1.2594285980 #> 135  -0.08105543  0.3120594090 #> 136   3.15931108  0.5071688052 #> 137   4.51549787 -1.1962735699 #> 138   2.26501479  1.6493998338 #> 139   1.31182071  0.6897981279 #> 140   2.07362431  1.9949097876 #> 141   2.62441913 -1.4993228903 #> 142   1.49413153  0.3011843562 #> 143   3.00949167 -0.9211767782 #> 144   3.41940941  0.1721235225 #> 145   4.26779549  1.5221153563 #> 146   3.17892420 -1.7285748785 #> 147   1.15531903  0.3151146481 #> 148   2.82834471  1.0576001862 #> 149   1.03084499 -0.7453805748 #> 150   2.57844784 -0.6282621231 #> 151   1.29637829 -1.6613163929 #> 152   3.69589937  0.6056506969 #> 153   1.08076830  0.9268501429 #> 154   4.75673897  1.6844144166 #> 155   2.00635171  1.0744853038 #> 156   1.62679773  1.7019491540 #> 157   1.78287205 -1.9904760327 #> 158   0.11116469  0.2982140416 #> 159   1.60939911  0.9599401290 #> 160   2.18290381  1.0804374907 #> 161   4.40418965 -0.9288988700 #> 162   2.47041863 -1.3887233892 #> 163   4.52726972 -1.2787473481 #> 164   2.23656801 -0.8041052222 #> 165   2.91711194  0.7441458721 #> 166   2.14393248  1.2540450227 #> 167   1.46734052  0.1392996544 #> 168   0.84662390 -0.0472238269 #> 169   0.99311262  0.7721879361 #> 170   3.03171520  1.5729852272 #> 171   2.20261499  1.1593369795 #> 172   0.95014976  1.9615427041 #> 173   0.36791326 -0.1470612604 #> 174   1.23609580 -0.7248081397 #> 175   2.25082202 -1.9187405426 #> 176   3.54371141 -1.0421792455 #> 177   0.26537753  0.1157326531 #> 178   1.26652361 -0.1976893218 #> 179   1.24618849 -0.1752632596 #> 180   0.95905377 -0.1266288497 #> 181   1.12884572  0.6584535036 #> 182   3.75238291  1.3453105483 #> 183   0.29625752  0.0146693299 #> 184   0.70798217  1.0756542832 #> 185   2.68106905  0.8007033337 #> 186   1.98621489  0.3837769348 #> 187   4.37702884 -0.9800839843 #> 188   3.20392540 -1.6162821129 #> 189   2.25995466 -1.0010190662 #> 190   2.01664784  1.5164552778 #> 191   1.04382827 -0.2674856307 #> 192   0.80091863  1.5558785843 #> 193   0.62633032 -1.7613064982 #> 194   3.24850735  0.8326427452 #> 195   1.96772844  1.3356458545 #> 196   2.36979700 -1.8574519604 #> 197   1.70226234 -1.9060713071 #> 198   0.49157774 -0.2651572749 #> 199   2.28072057 -1.7382229744 #> 200   2.58722486 -0.7383769155 #> 201   1.85714688 -1.2759335125 #> 202   2.78478657 -0.4970735051 #> 203   1.89511347  1.5469269836 #> 204   2.31454066 -0.0613619769 #> 205   1.38723219  0.2591253156 #> 206   4.21639114  0.6621557809 #> 207   2.13006258  0.0663343724 #> 208   0.91863531  0.3123197844 #> 209   2.99605980 -1.1645002710 #> 210   1.10388469 -1.8903177064 #> 211   4.97925104 -1.8277138378 #> 212   1.28310502 -0.6903369175 #> 213   1.44252033 -1.6292152647 #> 214   1.10656960 -0.3436127203 #> 215   1.81773121 -1.7662283918 #> 216   2.66727307  1.0455997009 #> 217   2.53166424  1.5104669817 #> 218   1.86726069 -1.4111823589 #> 219   3.12516545  1.1180015290 #> 220   3.18751256  1.9372114930 #> 221   0.23075082 -0.5619756812 #> 222   2.88505198 -0.5256776949 #> 223   3.68854061 -1.7775266189 #> 224   3.61916482  1.5590520827 #> 225   4.58872477 -1.2872420857 #> 226   2.12699080 -1.7903392995 #> 227   1.96765955  1.3125222465 #> 228   3.13764325  1.2965299794 #> 229   1.75633508 -0.4583646813 #> 230   3.51329748 -1.0750319129 #> 231   3.85471424 -1.5671375701 #> 232   4.05280632  1.1723383032 #> 233   0.74224983  1.6807102030 #> 234   2.85583718  1.6019266024 #> 235   2.79289893 -1.7698902115 #> 236   2.07464846  1.3726944979 #> 237   2.84808762  1.8231737148 #> 238   1.42393470 -0.7000897890 #> 239   3.39896453 -0.5341514172 #> 240   2.11497226 -1.4354752954 #> 241   1.90439319 -0.4022636786 #> 242   1.46648656  0.4898417452 #> 243   2.87247003 -1.6204558592 #> 244  -0.12668334  0.0572726931 #> 245  -0.55905106  1.8262512693 #> 246   2.49345382 -1.0173737602 #> 247  -0.08640112  0.2384080151 #> 248   2.30423109  0.4391938280 #> 249   0.04109667 -0.5242618397 #> 250   2.24951484 -1.0707787760 #> 251  -0.38778676  0.7745919218 #> 252   1.57517213 -0.9885325124 #> 253   4.98558560 -1.3547434080 #> 254   1.98531444  1.0525691416 #> 255   2.89920281  1.5435228441 #> 256   1.26490769 -0.2780373218 #> 257   2.40849366  1.3598980401 #> 258   1.04363269 -0.1682509985 #> 259   0.03461086 -0.4337921981 #> 260   2.16304788  0.1339903018 #> 261   0.44913016  0.4097494194 #> 262   1.84347193  1.4222408170 #> 263   1.10372765 -0.5946443425 #> 264   2.34965254 -1.5885539949 #> 265   2.61986013  1.9760591565 #> 266   1.09189546 -0.4934349647 #> 267   2.87801333  1.1861417582 #> 268   2.02122677  1.7385803182 #> 269   2.17932795  1.0586425392 #> 270   0.08140161  0.3073617946 #> 271   0.91124287  0.1663308199 #> 272   0.28109087  0.1252460945 #> 273   0.43547522 -0.3672952559 #> 274   1.89231212 -0.8646330629 #> 275   2.58436641  1.4525542771 #> 276   1.79454051 -0.7902358947 #> 277   1.22335125  1.7207319196 #> 278   0.88303941  0.7056231657 #> 279   0.15873946 -0.9777818406 #> 280   2.68737652  0.6744500818 #> 281   2.32515695 -0.1382181253 #> 282   1.68277672 -1.1060529463 #> 283   1.21205652  0.6525605144 #> 284   4.06782098  1.6294135973 #> 285   2.53251260  1.8278549574 #> 286   3.25177996  1.6733435495 #> 287   2.06933900 -0.5132851982 #> 288   3.63572521  1.3530016895 #> 289   1.02697896 -0.1424645251 #> 290   2.17558602 -1.6222476615 #> 291   3.64523629  1.5008889288 #> 292   4.70327252  0.7540711034 #> 293   2.42958963 -0.9814154143 #> 294   0.22171764  0.2284131479 #> 295   2.19665924 -1.9917001743 #> 296   1.15577961 -1.3727808436 #> 297   0.82712543  0.3586773323 #> 298   2.99224074 -1.5815240145 #> 299   2.04647937 -0.7426150646 #> 300   1.84369294  1.0314960741 #> 301   3.68690557 -0.6425612764 #> 302   3.38734255  0.8446755866 #> 303   0.70695243  0.2937307777 #> 304   1.90411298  1.0287694139 #> 305   0.89137326 -0.2377666691 #> 306   0.76372239 -1.4967273884 #> 307   1.40649160 -1.3674719082 #> 308   2.53202527  1.7779219784 #> 309   1.87711373  1.5715968581 #> 310   2.43323627  1.8985351548 #> 311   4.05409397  1.4481088538 #> 312   2.29516951 -0.6758235795 #> 313   1.31602657 -0.5771841388 #> 314   3.63772855 -1.2585487152 #> 315   1.87481509 -1.3949230788 #> 316  -0.18021303  0.1606391706 #> 317   2.75172769 -1.0398788443 #> 318   2.49535621  0.7292103963 #> 319   2.41725947 -0.4821401844 #> 320   1.52910876  1.4574875906 #> 321   3.55378954 -0.2331034681 #> 322   2.95468241 -1.9281330500 #> 323   0.39469386  0.1918050619 #> 324   1.94730229 -1.8548583519 #> 325   1.50286545  1.8644477855 #> 326   2.86365970 -1.0156440437 #> 327   2.21694678  1.2488610512 #> 328   1.77710464  0.1276924759 #> 329   3.37510830 -1.2912749015 #> 330   0.59200138 -0.5865239380 #> 331   2.53309403  1.3903604802 #> 332   1.39327301 -1.1786712799 #> 333   2.21479066 -0.8837340511 #> 334   2.39291617  1.9459715169 #> 335   4.48254646  0.4910915298 #> 336   1.97755402 -1.1863609031 #> 337   1.92527710 -0.6435975982 #> 338   1.35608549  0.5240781112 #> 339   1.46482680 -0.5743495664 #> 340   1.42035971  0.2164017390 #> 341   2.35785721  0.7850360135 #> 342   2.43833167 -0.3824313423 #> 343   1.78588900 -1.2882106472 #> 344   2.27700545 -0.2539491476 #> 345   3.78379624 -0.7414697334 #> 346   2.53647603  1.6619882174 #> 347   4.24233663 -1.6503672125 #> 348   1.97170338 -1.5667051990 #> 349   2.75694306  1.5092579108 #> 350   1.39343303  0.6745346272 #> 351   2.38419049 -0.8537275977 #> 352   0.56090446  0.4900090881 #> 353   3.14199637  0.5684067216 #> 354   1.66751819  0.2871158337 #> 355   2.24632440 -0.1860759864 #> 356   1.63168579 -1.8431175100 #> 357   3.02837094 -1.4241280369 #> 358   3.59206496  0.7375649484 #> 359   3.43668739 -1.4074712433 #> 360   1.68722586  0.6599680129 #> 361   0.47500583 -0.7398709618 #> 362   2.85389567 -0.1045615412 #> 363   1.59434878 -0.6569848545 #> 364   1.70044680 -0.2857364332 #> 365   1.37987995 -1.9208415095 #> 366   2.26654506  1.6175363734 #> 367   3.47932212  1.6632106323 #> 368   1.23850921 -1.4846521560 #> 369   1.15108550 -1.3630138747 #> 370   1.96161511 -0.7052466730 #> 371   1.49442824  0.2989145806 #> 372   2.54313278  1.8260080554 #> 373  -0.09638145 -0.6309303399 #> 374   0.98778370 -0.3168033222 #> 375  -0.16879714 -0.0117373932 #> 376   2.09893070 -0.3107049018 #> 377   3.17279663 -0.6570489630 #> 378   2.62892383  1.4678642722 #> 379   2.68795845 -0.4296709737 #> 380   1.62974673  0.6132467967 #> 381   0.93047586 -0.4284152258 #> 382   1.66650109 -1.5565371979 #> 383   2.57643929 -1.1087164041 #> 384   1.53749437  1.5562878465 #> 385   2.12558907 -1.5471979408 #> 386   2.73622134  1.2497004112 #> 387   1.72022941  0.7300447021 #> 388   1.35208383 -1.5827455483 #> 389   2.32003775 -1.4997557122 #> 390   2.51907682  0.1417787839 #> 391  -0.38204297  0.1692396626 #> 392   0.88554299  0.8106638948 #> 393   2.22577561 -1.8091599746 #> 394   2.53282795  0.8153044516 #> 395   3.45342840  0.6363874674 #> 396   0.63235800 -1.6153114000 #> 397   3.18330337 -1.2831091462 #> 398   3.19325213 -1.8601026637 #> 399   1.99046208 -0.6852707025 #> 400   0.52511313  0.4078233493 #> 401   1.33171625 -0.0267098313 #> 402   3.68177359 -1.2631054949 #> 403   2.17307425 -1.4986868585 #> 404   1.97496723 -0.1620967500 #> 405   2.66510396 -1.5396728162 #> 406   0.80186479  1.0498895599 #> 407   0.98128460 -0.0661144955 #> 408   2.87463163  1.7110878713 #> 409   2.23802502 -0.5597001575 #> 410   3.05703289 -0.2219516365 #> 411   2.37950821 -1.9189260062 #> 412  -1.20094593  0.3568388065 #> 413   3.34262328 -0.9713109508 #> 414   2.06021174  0.3980208216 #> 415   1.27975995 -1.6634585718 #> 416   2.46510225 -1.4469206920 #> 417   1.41405138 -1.2359486502 #> 418   1.59914893 -1.8256670618 #> 419   1.61960511  0.7188714975 #> 420   2.20861684  0.9096061047 #> 421   2.96062281 -1.9654518813 #> 422   1.56745477 -1.3312292639 #> 423   3.13543195  0.4647469353 #> 424  -2.64639026  0.3543827813 #> 425   2.43241927  1.3612687336 #> 426   3.03862242  1.5329289287 #> 427   3.92811952 -1.8413351495 #> 428   2.95566342  1.3093312383 #> 429   1.40580555 -0.1257105265 #> 430   2.45656122  1.8845214285 #> 431   1.87919596 -0.0692601763 #> 432   2.96211559  1.6201633969 #> 433   2.34795389  1.0148613099 #> 434   0.26109011 -0.0485250968 #> 435   3.93387833 -1.1965026166 #> 436   0.77171835  0.0162140494 #> 437   5.14246902 -1.0828509945 #> 438   3.10137324  1.5005093860 #> 439   3.37433238 -0.3912444031 #> 440   3.09016291 -1.9961706335 #> 441   2.73141913  1.6971839108 #> 442   2.33905958 -1.2571229134 #> 443   4.09037023 -0.2868909510 #> 444   3.86639661 -1.8983259453 #> 445   2.35334789  1.7417907137 #> 446   4.48703826  1.7177759400 #> 447   3.10037117  1.3494853200 #> 448   1.05660603 -1.0239037191 #> 449   3.23606971 -1.1667268379 #> 450   1.08225464 -0.3954004170 #> 451   1.93180006 -1.7474338720 #> 452   0.54252639  0.2162453420 #> 453   1.11993360  0.9274102561 #> 454   2.90479669  0.7842022441 #> 455   3.89195333 -1.1909455545 #> 456   1.39510054  0.8507298194 #> 457   1.12518606 -0.1220603576 #> 458   4.40746338 -1.4237333937 #> 459   1.31854556  1.3230716726 #> 460   3.03387718  1.5667742928 #> 461  -0.96242416 -0.0801805221 #> 462   1.40024898 -1.2232027259 #> 463   2.13726185 -0.3981113127 #> 464   2.31042817  1.0845102435 #> 465   3.31354730  1.6760594621 #> 466   2.80601020 -1.4873983264 #> 467   2.67743067  1.8836144358 #> 468   2.87358079  0.4222743912 #> 469   3.63704275  1.4564255951 #> 470   3.78942776  1.1489691380 #> 471   2.58066487  1.6003082115 #> 472   1.24788887 -0.1634730324 #> 473   3.04658592 -0.9686291851 #> 474   1.28988111 -0.2219798630 #> 475   1.33596202  0.0920657907 #> 476   0.82149623  0.3611538187 #> 477   2.02759419 -1.7348124869 #> 478   0.79103539 -0.4770864649 #> 479   3.19736830 -0.5220506713 #> 480   3.68474920 -1.7014080202 #> 481   1.36044507 -1.0935200248 #> 482   2.17083534 -1.7883284129 #> 483   1.14147261 -0.5335962065 #> 484   1.50731930 -0.5076495353 #> 485   2.85750300 -0.5350044044 #> 486   2.31385720  1.1457438674 #> 487   4.11535149  1.5345917260 #> 488   3.05120933 -1.6335753538 #> 489   2.72527290 -0.2332230955 #> 490  -0.08347330 -0.2019169657 #> 491   0.62767163  0.0667311670 #> 492   0.70913363  0.1963165542 #> 493   1.45383476  1.2708131280 #> 494   1.24016250 -0.3904137760 #> 495   1.71178981  1.6672640517 #> 496   2.15033556 -1.1780403871 #> 497   4.32714554 -1.0005984800 #> 498   3.75755637 -1.5167338327 #> 499   3.45841644  1.8393873554 #> 500   1.80244983  1.9871839071 #> 501   1.94271123  0.9624767257 #> 502   2.79465765  0.9366258103 #> 503   2.03019557  0.6026712470 #> 504   2.04225502  0.5466335490 #> 505   2.46005929  1.6940867584 #> 506   2.39689071 -1.3783693109 #> 507   0.98851984  0.1041401783 #> 508   2.57874483  1.8773376336 #> 509   2.77160882  1.5104812747 #> 510   2.28353044  1.8469098099 #> 511   1.43362474  0.7640387407 #> 512   3.51719363  1.3647831203 #> 513   0.74993385  0.0699726054 #> 514   1.04844875  1.2249389151 #> 515   2.30693618  1.6502739871 #> 516   3.91708797 -1.5433825208 #> 517   2.92289424  1.2943544034 #> 518  -0.47262378 -0.8847188493 #> 519   4.17216134 -1.7018040633 #> 520   0.29534008  0.0602914793 #> 521   2.50122638  1.7256631674 #> 522   3.17445030  1.0668261265 #> 523   1.70535729 -1.2710076431 #> 524   0.82977085  0.3959534466 #> 525   3.32600925 -0.8545305850 #> 526   0.41586257 -0.1453233315 #> 527   2.35234361  1.1280885572 #> 528   1.27690470  1.1788954809 #> 529   3.10799727  1.3442361373 #> 530   3.78473969  1.9987771409 #> 531   2.33124391  1.1504021222 #> 532   2.20041264 -1.4597869031 #> 533   1.54896081  1.5020769611 #> 534   1.97275939 -0.9085314097 #> 535   1.51723519 -0.3915422438 #> 536   4.46220444  1.6325099552 #> 537   0.35684366  0.0682992069 #> 538   0.37411309  1.4110284625 #> 539   1.93974781 -0.1655470682 #> 540   3.83434904 -0.8762910636 #> 541   1.48154311  0.1289170114 #> 542   1.58178528 -1.0029100720 #> 543   2.49340391  1.1853219084 #> 544   1.49617444 -1.2868718961 #> 545   1.73946964  1.2519767685 #> 546   1.59504196  0.7711161161 #> 547   0.99943636 -0.9101908486 #> 548   1.84929529 -0.0914011961 #> 549   1.13581941  0.2507477542 #> 550   2.10461884  0.1276678024 #> 551   1.78074484  0.5835366603 #> 552   1.13432157 -0.3450854458 #> 553   0.94076366  0.8784847921 #> 554   2.51830662 -0.3051680820 #> 555   2.13773283 -0.4519759491 #> 556   0.99973256  0.5779143218 #> 557   2.87225243  1.8546833191 #> 558   2.18904663  0.4319494879 #> 559   2.07319890  1.5654994249 #> 560   0.22153936  0.2816496016 #> 561   2.81008676 -1.5965196062 #> 562   1.44855602  0.2743018614 #> 563   3.21179543  1.2534620799 #> 564   1.47044923 -0.2396466285 #> 565   1.59950747 -1.7541638957 #> 566   0.82892523  1.6674318630 #> 567   1.86175958 -1.5119114351 #> 568   1.40933958  0.3751619933 #> 569   3.57301041 -1.8172307694 #> 570   1.74345036 -1.9775210219 #> 571   0.78838796  0.4376382101 #> 572   3.45382416 -1.5037033726 #> 573   3.35497018 -1.6826813398 #> 574   2.82109185  1.9950479120 #> 575   1.22568612  0.2257773988 #> 576   0.47794136  0.4564686939 #> 577   0.89518962 -1.7937340047 #> 578   1.86280566  0.8287462844 #> 579   0.48956636  0.2505698185 #> 580   2.89483647 -1.7822876470 #> 581   1.62503596 -0.7256233366 #> 582   3.76280861  1.3071191832 #> 583  -0.03335012  0.9711510651 #> 584   1.05319576 -0.8390084058 #> 585   3.85035548  1.0602225196 #> 586   0.17039287  0.0473344503 #> 587   1.85323475 -1.1515907478 #> 588   1.22889724  0.6539978422 #> 589   2.59235206 -0.1716962606 #> 590   1.68932780 -1.0127236415 #> 591   2.35704529 -1.4076475352 #> 592   1.68829186 -1.7125561135 #> 593   2.08156542  1.8830733886 #> 594   1.33539687  0.3257754035 #> 595   3.12085617  1.9554199958 #> 596   2.23289870  0.7387601072 #> 597   2.54262564 -0.7453697231 #> 598   3.43705275  1.7286508400 #> 599   3.10261817 -1.8036324261 #> 600   2.14770066 -1.9564620173 #> 601   2.32308737 -1.6901677428 #> 602   2.88592912  1.4539121985 #> 603   0.51637534 -0.1071422799 #> 604   0.36560590 -0.0465278868 #> 605   1.62207383 -1.1279369229 #> 606   2.60721336 -1.2339887777 #> 607   3.71298250  1.6428573923 #> 608   1.16409098 -0.3051100653 #> 609   0.13818975 -0.0444823643 #> 610  -0.02642572 -1.0467659160 #> 611   3.13307195  0.0863420982 #> 612   3.41255932  1.4564664848 #> 613   0.18593292  0.2813797360 #> 614   2.82064599  1.1486154394 #> 615   2.69512293 -1.5573098883 #> 616   2.86222622 -0.6251802202 #> 617   1.30718233  0.3941394100 #> 618   1.06813910  1.2527805641 #> 619   1.97843494 -1.4786743829 #> 620   3.40418932  1.1886077514 #> 621   2.59056381  1.6235345155 #> 622   2.22165316  0.8002291992 #> 623   3.80055502 -0.7883452177 #> 624   1.16050156 -1.9770318381 #> 625   1.13098816  1.3932213504 #> 626   1.50630215 -1.3400313770 #> 627   0.26170034  1.9062733585 #> 628   1.81831326 -1.7642314071 #> 629  -0.07093467 -0.2948921751 #> 630   3.53702214 -1.3514940180 #> 631   2.12667092 -0.1263838373 #> 632   2.16296589  0.4783800384 #> 633   2.59913580  1.1091223788 #> 634   0.52241988  0.6946331291 #> 635   3.02301108 -1.5004910799 #> 636   1.38132777 -1.1112087220 #> 637   2.72299643  1.6785436599 #> 638   2.03800710  0.4289538544 #> 639   1.44770699  0.8356794110 #> 640   2.59482939  1.6703172019 #> 641   2.55356680 -1.9927951749 #> 642   4.39865092 -1.7537528938 #> 643   1.62577592 -0.1589444894 #> 644   1.21460723 -0.4158932501 #> 645   0.20836527  0.8757762723 #> 646   1.63962459  1.3022060245 #> 647   2.64505887 -1.1206377484 #> 648   1.87079281 -1.0074618049 #> 649   0.39950871 -0.4765546210 #> 650   2.94259301 -1.2410308328 #> 651   1.23703691  0.7491378300 #> 652   4.04395452  1.4258249700 #> 653   3.00832177  1.6021817271 #> 654  -0.37532184  0.5364768254 #> 655   2.60221259 -1.3156098109 #> 656   1.41225353  1.5645253854 #> 657   2.49421905  0.8644734137 #> 658   2.37446436  0.0530924127 #> 659   0.27782892 -0.5205809744 #> 660   2.33955044 -1.6584534720 #> 661   2.59367038  1.9075651690 #> 662   1.53810751 -1.8380550575 #> 663   1.50526741 -0.9276369475 #> 664   2.62698031  1.6019554371 #> 665   3.16252887 -1.8987439703 #> 666   2.04090134  0.9203511402 #> 667   1.66421634  1.2684400650 #> 668   2.87503831  0.6927203890 #> 669   2.96665117 -1.0733449487 #> 670   4.29974747 -1.9120140644 #> 671   1.70504630  0.2850100165 #> 672   1.54822794  0.1497332193 #> 673   1.86388613 -0.4015580658 #> 674   3.40288072  0.9569123844 #> 675   0.55430343  0.1090480285 #> 676   1.30196667 -1.6379496539 #> 677   3.79334582 -0.6897041565 #> 678   3.76897870 -1.8521695193 #> 679   2.26948262  1.3054213235 #> 680   2.49893946 -1.0551066715 #> 681   2.18783354 -0.9144138591 #> 682   3.24818703  0.8257225743 #> 683   2.35328957  0.6251090560 #> 684   1.73983583  0.7024667561 #> 685   2.14805189  0.2245430686 #> 686   2.09160083  1.3943389216 #> 687   2.93150997  0.5188938938 #> 688   0.25060136 -1.9411108848 #> 689   2.51771944  0.8600784466 #> 690   1.84126879  1.2560993703 #> 691   1.56777745  0.0030381437 #> 692   2.92875152  0.3647748744 #> 693   1.62826855 -0.7346687187 #> 694   3.32943943 -1.6034803102 #> 695   2.36708544 -1.6112426659 #> 696   3.18273760 -1.8874914777 #> 697   1.34279013 -0.1868358217 #> 698   0.56135281 -0.1766626677 #> 699   1.53715702 -0.0008838037 #> 700   1.26646169 -0.4994736835 #> 701   2.16573729 -0.6810437385 #> 702   1.93688613 -0.1996482396 #> 703  -1.83678847  0.1784390677 #> 704   1.75747866 -0.7145217685 #> 705   2.15458341 -1.1465528514 #> 706   2.97824964  0.3440014059 #> 707   2.00438714 -1.7948164558 #> 708   0.82595564 -0.5971466927 #> 709   2.63532031 -0.2979023037 #> 710   2.94434604 -0.5583855379 #> 711  -0.36501870  0.0571135720 #> 712   1.64150031  1.3742684443 #> 713   0.71661303  0.0224565091 #> 714   2.67584613 -1.6365237189 #> 715   3.08785013  0.4722378571 #> 716   1.94237787 -1.0384033937 #> 717   3.05684745 -1.1668421077 #> 718   1.41017530 -0.8944983603 #> 719   0.96550962 -0.2606875515 #> 720   3.55384769  1.1679657446 #> 721   1.80642043 -0.2124082427 #> 722   2.70635783  0.7524764882 #> 723   1.23350620  1.4682873255 #> 724   2.70522640  1.5008417461 #> 725   2.68744684 -0.2074016212 #> 726   2.42984074 -0.4093675101 #> 727   1.54776529 -0.9841088271 #> 728   3.81286919 -1.5720865782 #> 729   1.14895244 -0.2943071416 #> 730   2.80708771  1.1910166480 #> 731   2.59008527  1.5660417080 #> 732   1.22004423  1.9396760892 #> 733   2.13522797  1.4495981764 #> 734   1.90659692  1.6385926213 #> 735   2.49295385 -0.5744906012 #> 736   2.41582204  0.2871314920 #> 737   4.86423311 -1.3536360664 #> 738   2.24548295 -0.2477122899 #> 739   4.19265067  1.1517144032 #> 740   2.86028571  1.1143057551 #> 741   0.85321244 -0.3245881563 #> 742   3.49621776 -1.0317648537 #> 743   1.88880316  0.0768490834 #> 744   0.20763561 -1.4657509960 #> 745   2.98660663  0.6312648505 #> 746   4.58860393 -1.1914612204 #> 747   2.15530649  0.5979014644 #> 748   1.16424032  1.7180088116 #> 749   3.42261747  0.5745885847 #> 750   2.78600396  0.7566302940 #> 751   2.57315000  0.4146153452 #> 752   3.60723580  1.8340996876 #> 753   2.50095919 -1.2884462196 #> 754   0.41048789 -0.4129808154 #> 755   1.17140645 -1.0461422699 #> 756   4.61863417 -1.8132779114 #> 757   4.54175195 -0.8287979113 #> 758   1.70916911  0.2857849589 #> 759   2.05114224 -1.8207082506 #> 760   1.27403232  0.0048079276 #> 761   0.16148972 -1.3479406061 #> 762   1.47639083 -0.2372374469 #> 763   0.38608890  0.5728203105 #> 764   3.21597286  0.6580480887 #> 765   2.34015890  0.8401488513 #> 766   2.07881149  1.1697135009 #> 767   1.47806272 -1.4722203156 #> 768   2.84553682 -1.3084626077 #> 769   2.28395916  1.9556578752 #> 770   3.14466687 -1.2801914122 #> 771   2.50215757  1.9852192998 #> 772   0.58127043  0.1823113887 #> 773   0.45135587  0.0016257958 #> 774   0.21781282 -0.1208867049 #> 775   2.82627414  1.9024713431 #> 776   2.86760987 -0.3918497590 #> 777   2.86713296 -0.4734346010 #> 778   1.31247398  0.2799780611 #> 779   1.88170410  0.3344084853 #> 780   1.66077377 -0.1340255849 #> 781   0.60855094 -0.5722523835 #> 782   0.89706140 -1.6798425149 #> 783   1.10914836 -0.2567362702 #> 784   2.13183107  1.3549452666 #> 785   0.93198214  1.9882421605 #> 786   2.77983478  1.5263779433 #> 787   1.57550698 -1.4726634966 #> 788   1.01186901 -0.0243604304 #> 789   3.26404678 -0.7672139471 #> 790   3.08038929  0.0483488627 #> 791   4.11967212  0.8194463067 #> 792   2.98792220  0.4299467206 #> 793   1.08838040  0.3877792899 #> 794   0.77425029 -0.3081581313 #> 795   2.22457467  1.6436701296 #> 796   2.44029207 -0.7774980282 #> 797   2.55238879  1.6172509911 #> 798   1.52658953 -1.0709449891 #> 799   0.25118608  0.2348735360 #> 800   1.30716640 -1.9224853879 #> 801   2.38646439  1.3456695732 #> 802   1.32688683 -1.7896512505 #> 803   2.45572533 -1.6099188980 #> 804   1.27637083  1.0826007770 #> 805   1.41113440  1.8364266790 #> 806   2.34560383 -1.6272049425 #> 807   3.40198341  0.8469320377 #> 808   1.21289107 -0.1783757554 #> 809   2.10194688 -1.4173280569 #> 810   2.20888753 -0.7039816519 #> 811   1.35599043 -1.9613367086 #> 812   2.27078594  0.3699445603 #> 813   2.26287267 -1.9622459784 #> 814   3.91959574 -1.4715895420 #> 815   3.02757896  0.8384196833 #> 816   2.99235689 -0.7393031828 #> 817   1.64062880  1.8106761230 #> 818   1.10013267 -1.6682051690 #> 819   2.07059712 -1.3876985740 #> 820   3.29501742  0.9259102801 #> 821   1.92809521 -1.6334500443 #> 822   0.73521929 -0.2440815363 #> 823   2.16030289 -1.0241666334 #> 824   2.31255509  0.0039018830 #> 825   1.24737685 -0.3595458353 #> 826   2.56454962  0.8750622990 #> 827   2.13940029  1.8626783332 #> 828   2.81807360 -0.5046635773 #> 829   2.23217493  1.0627199681 #> 830   2.26852938  1.3698440958 #> 831   3.33178273 -1.7759528058 #> 832   2.74968648 -0.0566031206 #> 833   1.15907260  0.2635859922 #> 834   2.95583593 -0.3228845187 #> 835   2.08562545  0.3481086073 #> 836   2.13956685  1.2944166064 #> 837   1.88668456 -1.6357755149 #> 838   2.16894493 -1.0023525711 #> 839   2.24908356 -1.3689768426 #> 840   2.06760395  0.9553971067 #> 841   2.12286357 -1.0544892624 #> 842   0.61562917  1.6467427537 #> 843   0.30525731  0.0253756121 #> 844   1.43930783  1.1496116370 #> 845   1.90607994 -1.7760630436 #> 846  -0.53784826 -0.1908965008 #> 847   4.00146693 -0.7548727179 #> 848   3.41062161 -1.5233787633 #> 849   1.23044766  0.5115946727 #> 850   0.22982364  0.8091418659 #> 851   2.61616722  1.2864792580 #> 852   0.61666363 -0.2615242722 #> 853   3.53171555  1.1426242031 #> 854   2.53642922 -0.0840844149 #> 855   2.69449146 -0.5927544013 #> 856   1.88235189  0.7110771639 #> 857   2.71774983  1.5824046731 #> 858   2.46148631 -1.7920412887 #> 859   2.30932505  1.5674722912 #> 860   2.32227148  0.6347744493 #> 861   1.55684930 -1.9553777557 #> 862   0.31406519 -0.0946460441 #> 863   1.98376052  1.0423022173 #> 864   1.66429384 -1.3475273503 #> 865   2.24756941  0.6256031934 #> 866   1.62613497  1.0616774755 #> 867   1.69587988 -1.7561026225 #> 868   3.40040932 -1.2342178272 #> 869   1.91257909 -1.0805080542 #> 870   0.48557586 -1.3919108510 #> 871   2.57796220 -0.5800997950 #> 872   3.39669530  1.4693123903 #> 873   3.39031638 -0.5537429312 #> 874   1.43112537 -1.8856007271 #> 875   2.78967459  1.9481515065 #> 876   3.33253211 -1.0374281369 #> 877   2.62892174 -1.4745046506 #> 878   3.58420263 -1.2775534000 #> 879   4.49902075 -1.2239776440 #> 880   0.22458033  0.0340838647 #> 881   2.09655409  0.2776253168 #> 882   1.96377515  0.0285332361 #> 883   2.09936589  1.9166696984 #> 884   3.80193006 -1.0692333262 #> 885   1.66595848 -0.3451444292 #> 886   2.15621058 -0.4816025943 #> 887   2.04501217  1.5295501174 #> 888   4.12223376  1.6067593535 #> 889   4.12088186  1.7379907211 #> 890   1.54184341  1.1307459259 #> 891   1.69783590  1.6163526746 #> 892   1.44008894  1.3810621984 #> 893   2.71975904  1.6486777542 #> 894   2.66813149 -1.0385444667 #> 895   2.97818534  1.5001023207 #> 896   0.52248521  0.2951843413 #> 897   1.06461075 -0.7911601858 #> 898   3.10634695  1.7530134693 #> 899   1.27453717 -0.1756611736 #> 900   0.81393536 -0.3121533813 #> 901   1.06702362  0.6299922597 #> 902   1.01173848  0.1326801199 #> 903   0.29265658  0.1468368387 #> 904   1.40932398 -0.3481263667 #> 905   3.11140433  0.8335760357 #> 906   1.16214843 -0.2367830630 #> 907   4.02827549  0.9256139938 #> 908   1.12880736 -0.2672130791 #> 909   2.25698772  1.4190688897 #> 910   0.97184062 -0.7295027468 #> 911   2.65562134  1.7889787285 #> 912   2.90987420  1.8072250932 #> 913   1.62592092 -1.2969532022 #> 914   1.49921220 -0.6911099022 #> 915   3.81695440 -1.4677864080 #> 916   0.04188154 -0.3460732466 #> 917   1.90487608  0.9314300772 #> 918   2.45083769 -1.5120477062 #> 919   3.14683323 -0.6566310581 #> 920   2.41212912  0.8624636019 #> 921   2.41659617  1.8649157360 #> 922   2.30902228 -0.7301041977 #> 923   1.54064498  1.0240276111 #> 924   1.34392182  1.9252050538 #> 925   3.00811708 -1.4552229401 #> 926   2.52732867  0.4281846695 #> 927   2.67892589  1.2126240227 #> 928   3.16109199  1.6406814177 #> 929   3.00330911 -0.6639506556 #> 930   1.64851282  0.0670516351 #> 931   1.43478046  0.8502972461 #> 932   1.68516887  0.2260719137 #> 933   2.06085563  1.5824871324 #> 934   2.43617262  1.0531697385 #> 935   3.46486750 -1.1431621034 #> 936   3.65657064 -1.1363929380 #> 937  -0.39739258 -0.0443849107 #> 938   1.47262837  1.8047499573 #> 939   0.78726596  0.2328644739 #> 940   2.74683913  0.3743971400 #> 941   2.75693017 -1.6177946050 #> 942   2.61414990  0.1844595112 #> 943   1.83479256  0.0972226178 #> 944   2.14834413 -0.7582685929 #> 945   0.89356281 -0.0278420458 #> 946   3.13093869  0.8827651711 #> 947   1.22294692  0.6253146399 #> 948   0.92705440  0.1346341893 #> 949   2.37459036  1.0717821177 #> 950   1.23949356  1.6955733290 #> 951   2.13809654 -0.7613768382 #> 952   1.55590160 -0.4488718938 #> 953   0.18654487 -0.6037639435 #> 954   1.31837933  1.3037299821 #> 955   0.92739509  0.4191329237 #> 956   2.40250622  1.2532834699 #> 957   2.63107461  1.2461952008 #> 958   2.94510859  0.3699276038 #> 959   1.29139014  1.0180669976 #> 960   2.54255447  1.9038796974 #> 961   1.30271749  0.9631075384 #> 962   1.11474744  0.3111712309 #> 963   2.58779221 -1.1630354337 #> 964   1.01880049 -1.4208048433 #> 965   2.38524309  1.5684876172 #> 966   2.05212172 -1.7973683374 #> 967   2.71770849 -0.3951485530 #> 968   3.14772905  0.9089241633 #> 969   1.34059699  0.0408340674 #> 970   0.59826831 -0.8400560599 #> 971   1.88059634  0.7867862862 #> 972   2.17341413 -0.3394320942 #> 973   1.42582135  0.5229159687 #> 974   2.00479988  1.9405216649 #> 975   1.91555293 -1.1845832048 #> 976  -0.13144395 -0.1853656732 #> 977   2.02707656 -0.6997204637 #> 978   2.96624267 -1.9777296996 #> 979   1.41432192 -0.3299028538 #> 980   3.27419468 -0.8097058181 #> 981   2.25878432 -0.5853113411 #> 982   1.14582228  1.9873643285 #> 983   3.23620406 -1.7192243226 #> 984   3.39870057 -0.8422304103 #> 985   1.83007086  0.0632536495 #> 986   2.10770782  1.8908931883 #> 987   0.03541984  0.7448312445 #> 988   1.53282530  1.1006765068 #> 989   0.56056340  1.6644379636 #> 990   3.47300843 -1.0563168591 #> 991   1.74634170 -0.0575390486 #> 992   3.18171608  1.9879447557 #> 993   2.86881063  1.8449527342 #> 994   3.55881236  0.7978864154 #> 995   1.47265844  0.5367983896 #> 996   2.03001600 -0.2429541517 #> 997   1.87759970  0.7706377236 #> 998   0.88017483 -1.8413011348 #> 999   1.69627740  0.4134961423 #> 1000  2.14530650  0.7184693646"},{"path":"https://nnpackages.github.io/PostCard/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mathias Lerbech Jeppesen. Author, maintainer. Emilie Hoejbjerre-Frandsen. Author.","code":""},{"path":"https://nnpackages.github.io/PostCard/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jeppesen M, Hoejbjerre-Frandsen E (2025). PostCard: Prognostic covariate adjustment estimation estimands. R package version 1.0.0.9000, https://nnpackages.github.io/PostCard/.","code":"@Manual{,   title = {PostCard: Prognostic covariate adjustment for estimation of estimands},   author = {Mathias Lerbech Jeppesen and Emilie Hoejbjerre-Frandsen},   year = {2025},   note = {R package version 1.0.0.9000},   url = {https://nnpackages.github.io/PostCard/}, }"},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"postcard","dir":"","previous_headings":"","what":"Prognostic covariate adjustment for estimation of estimands","title":"Prognostic covariate adjustment for estimation of estimands","text":"PostCard package PrOgnoSTic CovARiate aDjustment randomised clinical trials. time writing, package features convenient functions conducting analysis using prognostic covariate adjustment GLMs. package uses plug-estimation robust estimation marginal effect estimand influence functions robust estimation variance estimand.","code":""},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prognostic covariate adjustment for estimation of estimands","text":"can install development version PostCard GitHub : Setup-chunk load package, set seed turn verbosity rendering README.","code":"pak::pak(\"NNpackages/PostCard\") library(PostCard) withr::local_seed(1395878) withr::local_options(list(PostCard.verbose = 0))"},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"simulating-data-for-exploratory-analyses","dir":"","previous_headings":"","what":"Simulating data for exploratory analyses","title":"Prognostic covariate adjustment for estimation of estimands","text":"First, simulate data able enable showcasing functionalities. use glm_data() function package, user can specify expression alongside variables family response simulate response GLM linear predictor given expression provided.","code":"n <- 1000 b0 <- 1 b1 <- 3 b2 <- 2  # Simulate data with a non-linear effect dat_treat <- glm_data(   b0+b1*sin(W)^2+b2*A,   W = runif(n, min = -2, max = 2),   A = rbinom(n, 1, .5),   family = gaussian() # Default value )"},{"path":[]},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"fitting-rctglm-without-prognostic-covariate-adjustment","dir":"","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Fitting rctglm() without prognostic covariate adjustment","title":"Prognostic covariate adjustment for estimation of estimands","text":"rctglm() function estimates specified estimand using plug-estimation randomised clinical trials estimates variance using influence function marginal effect estimand. interface rctglm() similar stats::glm() function added mandatory specification randomisation variable data, usually (name ) treatment variable default, ratio 1’s data used default, function takes average treatment effect (ATE) estimand Thus, can estimate ATE simply writing : Note default, information algorithm printed console, suppress behavior. See vignette(\"-details\"). creates rctglm object prints ","code":"ate <- rctglm(formula = Y ~ A * W,               group_indicator = A,               data = dat_treat,               family = \"gaussian\") # Default value ate #>  #> Object of class rctglm  #>  #> Call:  rctglm(formula = Y ~ A * W, group_indicator = A, family = \"gaussian\",  #>     data = dat_treat) #>  #> Counterfactual control mean (psi_0=E[Y|X, A=0]) estimate: 2.776 #> Counterfactual control mean (psi_1=E[Y|X, A=1]) estimate: 4.867 #> Estimand function r: psi1 - psi0 #> Estimand (r(psi_1, psi_0)) estimate (SE): 2.091 (0.09209)"},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"structure-of-rctglm-and-methods-for-extracting-entities","dir":"","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Structure of rctglm and methods for extracting entities","title":"Prognostic covariate adjustment for estimation of estimands","text":"print method rctglm class specifies way print object seen . Behind S3 class rctglm list Accessible ate$estimand using methods estimand(ate) est(ate) Accessible ate$counterfactual_mean<0/1> ate$counterfactual_pred<0/1> Entire glm object available ate$glm Method coef uses corresponding method glm object contained within rctglm Thus, methods available : See info documentation page rctglm_methods().","code":"# \"estimate\" also available as alternative to just \"est\" est(ate) #>   Estimate Std. Error #> 1 2.091095 0.09208528 coef(ate) #> (Intercept)           A           W         A:W  #>  2.77585401  2.09122279  0.02364106  0.04961895"},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"using-prognostic-covariate-adjustment","dir":"","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Using prognostic covariate adjustment","title":"Prognostic covariate adjustment for estimation of estimands","text":"rctglm_with_prognosticscore() function uses fit_best_learner() function fit prognostic model historical data uses prognostic model predict observations current data set. prognostic scores used covariate GLM running rctglm(). Allowing use complex non-linear models create prognostic score allows utilising information potentially many variables, “catching” non-linear relationships using information GLM model using single covariate adjustment. simulate historical data showcase use function well: call rctglm_with_prognosticscore() rctglm() added specification (Historical) data fit prognostic model using fit_best_learner() Default uses covariates data. (Optionally) number folds cross validation list learners fitting best learner Thus, simple call estimates average treatment effect, adjusting prognostic score, seen : Quick results fit can seen printing object: ’s evident case non-linear relationship covariate observe response, adjusting prognostic score reduces standard error estimand approximation quite bit.","code":"dat_notreat <- glm_data(   b0+b1*sin(W)^2,   W = runif(n, min = -2, max = 2),   family = gaussian # Default value ) ate_prog <- rctglm_with_prognosticscore(   formula = Y ~ A * W,   group_indicator = A,   data = dat_treat,   family = gaussian(link = \"identity\"), # Default value   data_hist = dat_notreat) ate_prog #>  #> Object of class rctglm_prog  #>  #> Call:  rctglm_with_prognosticscore(formula = Y ~ A * W, family = gaussian(link = \"identity\"),  #>     data = dat_treat, group_indicator = A, data_hist = dat_notreat) #>  #> Counterfactual control mean (psi_0=E[Y|X, A=0]) estimate: 2.827 #> Counterfactual control mean (psi_1=E[Y|X, A=1]) estimate: 4.821 #> Estimand function r: psi1 - psi0 #> Estimand (r(psi_1, psi_0)) estimate (SE): 1.994 (0.06406)"},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"investigating-the-prognostic-model","dir":"","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Using prognostic covariate adjustment","what":"Investigating the prognostic model","title":"Prognostic covariate adjustment for estimation of estimands","text":"Information prognostic model available list element prognostic_info resulting object. contains Accessible ate$prognostic_info$model_fit method prog_model(ate) Accessible ate$prognostic_info$learners number folds used cross validation (cv_folds) historical data used fitting model","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/PostCard-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PostCard: Prognostic covariate adjustment for estimation of estimands — PostCard-package","title":"PostCard: Prognostic covariate adjustment for estimation of estimands — PostCard-package","text":"Convenient functions conducting analysis using prognostic covariate adjustment GLMs. package uses plug-estimation robust estimation estimand influence functions robust estimation variance estimand.","code":""},{"path":[]},{"path":"https://nnpackages.github.io/PostCard/reference/PostCard-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PostCard: Prognostic covariate adjustment for estimation of estimands — PostCard-package","text":"Maintainer: Mathias Lerbech Jeppesen mathiasljeppesen@outlook.com Authors: Emilie Hoejbjerre-Frandsen ehfd@novonordisk.com","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"Find best learner terms RMSE among specified learners using cross validation","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"","code":"fit_best_learner(   data,   formula,   cv_folds = 5,   learners = default_learners(),   verbose = options::opt(\"verbose\") )"},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"data optional data frame, list environment (object     coercible .data.frame data frame) containing     variables model.  found data,     variables taken environment(formula),     typically environment glm called. formula object class \"formula\" (one can coerced class): symbolic description model fitted. details model specification given ‘Details’ glm documentation. cv_folds numeric number cross-validation folds used fitting evaluating models learners list tidymodels verbose numeric verbosity level. Higher values means information printed console. value 0 means nothing printed console execution (Defaults 2, overwritable using option 'PostCard.verbose' environment variable 'R_POSTCARD_VERBOSE')","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"trained workflow","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"","code":"# Generate some synthetic 2-armed RCT data along with historical controls n <- 100 dat_rct <- glm_data(   1+2*x1+3*a,   x1 = rnorm(n, 2),   a = rbinom (n, 1, .5),   family = gaussian() ) dat_hist <- glm_data(   1+2*x1,   x1 = rnorm(n, 2),   family = gaussian() )  # Fit a learner to the historical control data with default learners fit <- fit_best_learner(Y ~ ., data = dat_hist) #> ℹ Fitting learners #> • mod_mars #> • mod_lm #> • mod_gbt #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 1 of 3 resampling: mod_mars #> ✔ 1 of 3 resampling: mod_mars (182ms) #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 2 of 3 resampling: mod_lm #> ✔ 2 of 3 resampling: mod_lm (93ms) #> i 3 of 3 tuning:     mod_gbt #> ✔ 3 of 3 tuning:     mod_gbt (937ms) #> ℹ Model with lowest RMSE: mod_lm  # Use it fx. to predict the \"control outcome\" in the 2-armed RCT predict(fit, new_data = dat_rct) #> # A tibble: 100 × 1 #>    .pred #>    <dbl> #>  1 2.25  #>  2 5.50  #>  3 0.217 #>  4 4.99  #>  5 6.22  #>  6 7.25  #>  7 1.42  #>  8 4.51  #>  9 4.52  #> 10 4.44  #> # ℹ 90 more rows"},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data simulated from a GLM — glm_data","title":"Generate data simulated from a GLM — glm_data","text":"Provide formula, variables family generate linear predictor using formula provided variables using inverse link family generate GLM modelled mean, mu, used simulate response mean generating function according chosen family.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data simulated from a GLM — glm_data","text":"","code":"glm_data(   formula_eta,   ...,   family = gaussian(),   family_args = list(sd = 1),   response_name = \"Y\" )"},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data simulated from a GLM — glm_data","text":"formula_eta expression specifying generate mean response (together inverse link family) ... data.frame columns corresponding variables used formula_eta, named list variables, individually provided named arguments variables family family response. can character string naming family function, family function result call family function family_args named list values arguments passed family relevant r<family_name> function simulating data response_name character giving name simulated response","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data simulated from a GLM — glm_data","text":"data.frame","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data simulated from a GLM — glm_data","text":"","code":"# Generate a gaussian response from a single covariate glm_data(1+2*x1,                 x1 = rnorm(10)) #>            Y          x1 #> 1  -1.449147 -0.89480241 #> 2   2.865960  0.90426912 #> 3  -1.648712  0.07964921 #> 4  -2.429914 -1.25882722 #> 5   2.268991  1.02568511 #> 6  -1.125662 -0.73077860 #> 7   1.246019 -0.19014551 #> 8   1.550481  0.52886469 #> 9   2.370782  0.55021053 #> 10  2.566846  0.54968434  # Generate a gaussian response from a single covariate with # non-linear effects glm_data(1+2*abs(sin(x1)),                 x1 = runif(10, min = -2, max = 2)) #>            Y         x1 #> 1  4.5599831  1.0618623 #> 2  1.8888026  0.5078665 #> 3  3.9605488  0.9213538 #> 4  0.9734996 -0.3051824 #> 5  2.3826286 -0.9266769 #> 6  2.0765995  1.0761921 #> 7  1.2399405  0.3493867 #> 8  3.6059388  1.5942710 #> 9  3.6161785  1.4812982 #> 10 1.0885146 -0.4027751  # Generate a negative binomial response glm_data(1+2*x1-x2,                 x1 = rnorm(10),                 x2 = rgamma(10, shape = 2),                 family = MASS::negative.binomial(2)) #>     Y         x1        x2 #> 1   0 -0.7836391 2.3050987 #> 2   1 -0.9531239 1.3214499 #> 3   0  1.7927561 3.7469426 #> 4   0  0.3489767 1.8461783 #> 5   2  0.2591038 2.0354566 #> 6   0 -0.8059519 0.6438993 #> 7   4  0.1056647 0.7646888 #> 8   2 -0.3335997 0.9691220 #> 9  20  1.6418480 0.6479179 #> 10  0 -0.6439059 0.5980742  # Provide variables as a list/data.frame glm_data(1+2*x1-x2,                 data.frame(                   x1 = rnorm(10),                   x2 = rgamma(10, shape = 2)                 ),                 family = MASS::negative.binomial(2)) #>    Y          x1        x2 #> 1  0 -0.05367151 2.0555178 #> 2  0 -0.56352463 4.8979183 #> 3  0 -0.74390896 0.9440099 #> 4  0 -0.10904165 0.3404743 #> 5  0 -0.56082923 2.1408569 #> 6  0  0.18800155 0.6841673 #> 7  1  0.74885094 1.8483538 #> 8  0 -1.91653832 0.6336780 #> 9  2  0.23609585 0.2305099 #> 10 2  0.62895342 1.4685068"},{"path":"https://nnpackages.github.io/PostCard/reference/options.html","id":null,"dir":"Reference","previous_headings":"","what":"PostCard Options — options","title":"PostCard Options — options","text":"Internally used, package-specific options. options prioritize R options() values, fall back environment variables undefined. neither option environment variable set, default value used.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PostCard Options — options","text":"verbose numeric verbosity level. Higher values means information printed console. value 0 means nothing printed console execution (Defaults 2, overwritable using option 'PostCard.verbose' environment variable 'R_POSTCARD_VERBOSE')","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/options.html","id":"checking-option-values","dir":"Reference","previous_headings":"","what":"Checking Option Values","title":"PostCard Options — options","text":"Option values specific PostCard can accessed passing package name env.","code":"options::opts(env = \"PostCard\")  options::opt(x, default, env = \"PostCard\")"},{"path":"https://nnpackages.github.io/PostCard/reference/options.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"PostCard Options — options","text":"verbose default: 2 option: PostCard.verbose envvar: R_POSTCARD_VERBOSE (evaluated possible, raw string otherwise)","code":"2"},{"path":[]},{"path":"https://nnpackages.github.io/PostCard/reference/power_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Guenther-Schouten Power Approximation — power_gs","title":"Guenther-Schouten Power Approximation — power_gs","text":"function calculates Guenther-Schouten power approximation ANOVA ANCOVA. approximation based (Guenther WC. Sample Size Formulas Normal Theory T Tests. American Statistician. 1981;35(4):243–244) (Schouten HJA. Sample size formula continuous outcome unequal group sizes unequal variances. Statistics Medicine. 1999;18(1):87–91).","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/power_gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guenther-Schouten Power Approximation — power_gs","text":"","code":"power_gs(   n = 100,   r = 1,   sigma = sqrt(2),   rho = NULL,   R2 = NULL,   ate = 0.6,   margin = 0,   alpha = 0.05 )"},{"path":"https://nnpackages.github.io/PostCard/reference/power_gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guenther-Schouten Power Approximation — power_gs","text":"n Number participants total. number participants treatment group \\(n1=(r/(1+r))n\\) control group \\(n1=(1/(1+r))n\\). r Allocation ratio \\(r=n1/n0\\). one--one randomisation r=1. sigma Standard deviation \\(Y(w)\\), w treatment indicator, assume homoskedasticity. rho Correlation outcome adjustment covariate univariable covariate adjustment. R2 estimated pooled multiple correlation coefficient outcome covariates. ate Minimum effect size able detect. margin Superiority margin (non-inferiority margin, negative value can provided). alpha Significance level. Due regulatory guidelines using one-sided test, half specified significance level used. Thus, standard alpha = .05, significance level 0.025 used.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/power_gs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guenther-Schouten Power Approximation — power_gs","text":"numeric power approximation based Guenther-Schouten approximation","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/power_gs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Guenther-Schouten Power Approximation — power_gs","text":"formula case ANCOVA model multiple covariate adjustement : $$ n=\\frac{(1+r)^2}{r}\\frac{(z_{1-\\alpha/2}+z_{1-\\beta})^2\\sigma^2(1-R^2)}{(\\beta_1-\\beta_0-\\Delta_s)^2}+\\frac{(z_{1-\\alpha/2})^2}{2} $$ \\(\\widehat{R}^2\\coloneqq \\frac{\\widehat{\\sigma}_{XY}^\\top \\widehat{\\Sigma}_X^{-1}\\widehat{\\sigma}_{XY}}{\\widehat{\\sigma}^2}\\), denote \\(\\sigma^2\\) variance outcome, \\(\\Sigma_X\\) covariance matrix covariates, \\(\\sigma_{XY}\\) \\(p\\)-dimensional column vector consisting covariance outcome variable covariate. univariate case \\(R^2\\) replaced \\(\\rho^2\\) default, R2 rho NULL, meaning power approximated case ANOVA adjustment covariates present besides binary group indicator. case, formula applies \\(R^2\\) replaced \\(0\\).","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/power_gs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guenther-Schouten Power Approximation — power_gs","text":"","code":"# Approximate the power for an ANCOVA with a single adjustment covariate power_gs(rho = 0.7) #> [1] 0.8369041  #' # Approximate power for an ANCOVA with several adjustment covariates power_gs(R2 = 0.8) #> [1] 0.9969063  # Approximate the power for an ANOVA with 2:1 randomisation, an assumed # variance of Y(w) of 4, an assumed effect size of 1.5 and a margin of 1 power_gs(n = 400, r = 2/3, sigma = sqrt(4), ate = 1.5, margin = 1) #> [1] 0.6856785"},{"path":"https://nnpackages.github.io/PostCard/reference/power_nc.html","id":null,"dir":"Reference","previous_headings":"","what":"Power Approximation based on non-centrality parameter — power_nc","title":"Power Approximation based on non-centrality parameter — power_nc","text":"function calculates power ANOVA ANCOVA based non-centrality parameter exact t-distributions.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/power_nc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power Approximation based on non-centrality parameter — power_nc","text":"","code":"power_nc(   n = 100,   r = 1,   sigma = sqrt(2),   rho = NULL,   R2 = NULL,   n.adj = ifelse(is.null(rho), 0, 1),   ate = 0.6,   margin = 0,   alpha = 0.05 )"},{"path":"https://nnpackages.github.io/PostCard/reference/power_nc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power Approximation based on non-centrality parameter — power_nc","text":"n Number participants total. number participants treatment group \\(n1=(r/(1+r))n\\) control group \\(n1=(1/(1+r))n\\). r Allocation ratio \\(r=n1/n0\\). one--one randomisation r=1. sigma Standard deviation \\(Y(w)\\), w treatment indicator, assume homoskedasticity. rho Correlation outcome adjustment covariate univariable covariate adjustment. R2 estimated pooled multiple correlation coefficient outcome covariates. n.adj Number adjustment covariates. Used calculating degrees freedom. Specification necessary specifying R2. ate Minimum effect size able detect. margin Superiority margin (non-inferiority margin, negative value can provided). alpha Significance level. Due regulatory guidelines using one-sided test, half specified significance level used. Thus, standard alpha = .05, significance level 0.025 used.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/power_nc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power Approximation based on non-centrality parameter — power_nc","text":"function returns power approximation based non-centrality parameter exact t-distribution.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/power_nc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power Approximation based on non-centrality parameter — power_nc","text":"prospective power estimations based (Kieser M. Methods Applications Sample Size Calculation Recalculation Clinical Trials. Springer; 2020). ANOVA power calculated based non-centrality parameter given $$nc =\\sqrt{\\frac{r}{(1+r)^2}\\cdot n}\\cdot\\frac{ate-margin}{\\sigma},$$ denote \\(\\sigma^2\\) variance outcome, power can estimated $$1-\\beta = 1 - F_{t,n-2,nc}\\left(F_{t, n-2, 0}^{-1}(1-\\alpha/2)\\right).$$ power ANCOVA univariate covariate adjustment interaction calculated based non-centrality parameter given $$nc =\\sqrt{\\frac{rn}{(1+r)^2}}\\frac{ate-margin}{\\sigma\\sqrt{1-\\rho^2}},$$ power can estimated $$1-\\beta = 1 - F_{t,n-3,nc}\\left(F_{t, n-3, 0}^{-1}(1-\\alpha/2)\\right).$$ power ANCOVA either univariate covariate adjustment interaction multiple covariate adjustement without interaction calculated based non-centrality parameter given $$nc =\\frac{ate-margin}{\\sqrt{\\left(\\frac{1}{n_1}+\\frac{1}{n_0} + X_d^\\top\\left((n-2)\\Sigma_X\\right)^{-1}X_d \\right)\\sigma^2\\left(1-\\frac{\\sigma_{XY}^\\top \\Sigma_X^{-1}\\sigma_{XY}}{\\sigma^2}\\right)}}.$$ \\(X_d \\coloneqq \\left(\\overline{X}_1^1-\\overline{X}_0^1, \\ldots, \\overline{X}_1^p-\\overline{X}_0^p\\right)^\\top\\), \\(\\widehat{R}^2\\coloneqq \\frac{\\widehat{\\sigma}_{XY}^\\top \\widehat{\\Sigma}_X^{-1}\\widehat{\\sigma}_{XY}}{\\widehat{\\sigma}^2}\\), \\(\\Sigma_X\\) covariance matrix covariates, \\(\\sigma_{XY}\\) \\(p\\)-dimensional column vector consisting covariance outcome variable covariate. Since case randomized trials expected difference covariate values groups 0. Furthermore, elements \\(\\Sigma_X^{-1}\\) small, unless variances close 0, covariates exhibit strong linear dependencies, correlations close 1. scenarios excluded since lead potentially serious problems regarding inference either way. arguments used Zimmermann et. al (Zimmermann G, Kieser M, Bathke AC. Sample Size Calculation Blinded Recalculation Analysis Covariance Models Multiple Random Covariates. Journal Biopharmaceutical Statistics. 2020;30(1):143–159.) approximate non-centrality parameter univariate case \\(\\rho^2\\) replaced \\(R^2\\). power ANCOVA n.adj adjustment covariates can estimated $$1-\\beta = 1 - F_{t,n - 2 - n.adj,nc}\\left(F_{t, n - 2 - n.adj,0), 0}^{-1}(1-\\alpha/2)\\right).$$","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/power_nc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power Approximation based on non-centrality parameter — power_nc","text":"","code":"# Approximate the power for an ANCOVA with a single adjustment covariate power_nc(rho = 0.7) #> [1] 0.8367532  #' # Approximate power for an ANCOVA with several adjustment covariates power_nc(R2 = 0.8, n.adj = 3) #> [1] 0.9968886  # Approximate the power for an ANOVA with 2:1 randomisation, an assumed # variance of Y(w) of 4, an assumed effect size of 3 and a margin of 1 power_nc(n = 400, r = 2/3, sigma = sqrt(4), ate = 1.5, margin = 1) #> [1] 0.6856692"},{"path":"https://nnpackages.github.io/PostCard/reference/prog.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information about the fitted prognostic model — prog","title":"Extract information about the fitted prognostic model — prog","text":"Extracts prognostic_info list element rctglm_prog object. See 'Value' rctglm_with_prognosticscore details.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/prog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information about the fitted prognostic model — prog","text":"","code":"prog(x)  # S3 method for class 'rctglm_prog' prog(x)"},{"path":"https://nnpackages.github.io/PostCard/reference/prog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information about the fitted prognostic model — prog","text":"x object class rctglm_prog (returned rctglm_with_prognosticscore)","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/prog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information about the fitted prognostic model — prog","text":"description","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/prog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract information about the fitted prognostic model — prog","text":"","code":"# Generate some data n <- 100 b0 <- 1 b1 <- 1.5 b2 <- 2 W1 <- runif(n, min = -2, max = 2)  dat_treat <- glm_data(   b0+b1*abs(sin(W1))+b2*A,   W1 = W1,   A = rbinom (n, 1, .5) )  dat_notreat <- glm_data(   b0+b1*abs(sin(W1)),   W1 = W1 )  ate <- rctglm_with_prognosticscore(   formula = Y ~ .,   group_indicator = A,   data = dat_treat,   family = gaussian(),   estimand_fun = \"ate\",   data_hist = dat_notreat) #>  #> ── Fitting prognostic model ── #>  #> ℹ Created formula for fitting prognostic model as: Y ~ . #> ℹ Fitting learners #> • mod_mars #> • mod_lm #> • mod_gbt #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 1 of 3 resampling: mod_mars #> ✔ 1 of 3 resampling: mod_mars (122ms) #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 2 of 3 resampling: mod_lm #> ✔ 2 of 3 resampling: mod_lm (94ms) #> i 3 of 3 tuning:     mod_gbt #> ✔ 3 of 3 tuning:     mod_gbt (911ms) #> ℹ Model with lowest RMSE: mod_mars #> ℹ Investigate trained learners and fitted model in `prognostic_info` list element #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.46 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi0' as: '-1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi1' as: '1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`  prog(ate) #> $formula #> Y ~ . #> <environment: 0x56240dc90780> #>  #> $model_fit #> ══ Workflow [trained] ══════════════════════════════════════════════════════════ #> Preprocessor: Formula #> Model: mars() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> Y ~ . #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> Selected 3 of 8 terms, and 1 of 1 predictors #> Termination condition: RSq changed by less than 0.001 at 8 terms #> Importance: W1 #> Number of terms at each degree of interaction: 1 2 (additive model) #> GCV 1.008325    RSS 89.09561    GRSq 0.1705226    RSq 0.2521924 #>  #> $learners #> $learners$mars #> $learners$mars$model #> MARS Model Specification (regression) #>  #> Main Arguments: #>   prod_degree = 3 #>  #> Computational engine: earth  #>  #>  #> $learners$mars$grid #> NULL #>  #>  #> $learners$lm #> $learners$lm$model #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>  #>  #> $learners$lm$grid #> NULL #>  #>  #> $learners$gbt #> $learners$gbt$model #> Boosted Tree Model Specification (regression) #>  #> Main Arguments: #>   trees = parsnip::tune(\"trees\") #>   tree_depth = parsnip::tune(\"tree_depth\") #>   learn_rate = 0.1 #>  #> Computational engine: xgboost  #>  #>  #> $learners$gbt$grid #>    trees tree_depth #> 1     25          3 #> 2     50          3 #> 3     75          3 #> 4    100          3 #> 5    125          3 #> 6    150          3 #> 7    175          3 #> 8    200          3 #> 9    225          3 #> 10   250          3 #> 11   275          3 #> 12   300          3 #> 13   325          3 #> 14   350          3 #> 15   375          3 #> 16   400          3 #> 17   425          3 #> 18   450          3 #> 19   475          3 #> 20   500          3 #>  #>  #>  #> $cv_folds #> [1] 5 #>  #> $data #>               Y          W1 #> 1    1.87622309 -1.69870418 #> 2    4.54665468 -0.85819470 #> 3    1.86580106 -0.75759028 #> 4    2.04097906 -1.41308975 #> 5    2.91953527  1.19908205 #> 6    0.53173185 -1.31201568 #> 7    0.38200852  1.14273525 #> 8    1.70055542 -0.11985694 #> 9    2.17523281 -0.26816908 #> 10   0.62848301  0.29813144 #> 11   3.10404149  0.91987978 #> 12   3.44872738  1.57674859 #> 13   1.00129932 -1.11877452 #> 14   2.46472443 -0.83361425 #> 15   2.95449346  1.25159500 #> 16   2.14059779 -1.82559068 #> 17   0.78747211  0.02108666 #> 18   1.99667036 -1.03337647 #> 19   0.39550644  0.35656967 #> 20   1.30388539  1.88456227 #> 21   4.36910223 -1.06911599 #> 22   1.58281852  1.46967206 #> 23   2.95823543 -1.55695303 #> 24   2.35465862  1.20596712 #> 25   1.20481908  0.63169782 #> 26   0.36827851  0.60821719 #> 27   1.94067966 -1.09470942 #> 28   0.73236357  1.41591853 #> 29   1.34343224 -0.25757184 #> 30   1.32268331 -0.84287305 #> 31   0.86854336  0.55033868 #> 32   2.28623229 -0.94184217 #> 33   2.89726574 -0.45492649 #> 34   2.40674684  0.47677588 #> 35   1.78837824  0.16671233 #> 36   0.02972417 -0.06067600 #> 37   1.76572199  1.05717968 #> 38   1.72911882  1.84410775 #> 39   2.01235435 -0.91766187 #> 40   2.36055102  0.92240088 #> 41   1.76393967 -1.46333782 #> 42   1.92072079 -1.80640709 #> 43   1.49133513  0.81442828 #> 44   3.66301187 -1.41114482 #> 45   2.50975335  1.07662133 #> 46   2.69209841 -1.29459956 #> 47   3.54649991 -1.55696400 #> 48   1.18576867  1.75336963 #> 49   2.84954429  1.38588456 #> 50   0.86420499  0.28457433 #> 51   2.28740765  0.71637363 #> 52   2.71838934 -1.64271103 #> 53   1.40171915  1.14149650 #> 54   2.38347514 -1.09217021 #> 55   2.20874773 -0.20728614 #> 56   2.07033713 -1.35508945 #> 57   3.39768474 -1.29555324 #> 58   1.81366145 -1.20708751 #> 59   0.33230117 -0.56955474 #> 60   1.05693410 -1.27466718 #> 61   0.01755014  0.24457944 #> 62   1.15473610  0.63633204 #> 63   1.42690076  0.64101364 #> 64   3.75048698 -1.99039685 #> 65   4.05485099  1.97378414 #> 66   2.90911611  0.50995692 #> 67   2.24922225 -1.94147866 #> 68   2.20867798 -1.17928713 #> 69   2.71365349  0.65230666 #> 70   0.80097874 -0.14502388 #> 71   3.00749824 -0.55860737 #> 72   3.27098331  0.75746557 #> 73   2.91837063 -0.96455685 #> 74   2.45258764  1.40482013 #> 75   1.42942449 -0.07998124 #> 76   1.47263551  0.14906556 #> 77   0.54720509  0.64655959 #> 78   2.67183557 -0.79658196 #> 79   2.22526588 -0.94599394 #> 80   2.14543896 -0.77981548 #> 81   1.83916734  1.49983306 #> 82   1.66832914  0.87374887 #> 83   1.56342577 -0.37232122 #> 84   1.54861289 -1.92256211 #> 85   3.81872191 -1.79927856 #> 86   3.30046142  0.80900413 #> 87   3.93385397 -1.73451892 #> 88   2.35371782 -1.85547053 #> 89   1.79221472 -1.91938522 #> 90   1.51253320 -0.50887561 #> 91   1.00899015 -1.09733838 #> 92  -1.31372594 -0.03232760 #> 93  -0.09226516 -0.21341937 #> 94   2.28867007  0.76081960 #> 95   2.76601890  1.37095992 #> 96   1.77153444 -0.49666533 #> 97   2.29650638  1.93955875 #> 98   4.40931813  1.80970532 #> 99   3.26661419  1.95959404 #> 100  0.03167744 -0.22748658 #>"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"procedure uses plug--estimation influence functions perform robust inference specified estimand setting randomised clinical trial, even case heterogeneous effect covariates randomisation groups.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"","code":"rctglm(   formula,   group_indicator,   family,   data,   group_allocation_prob = NULL,   estimand_fun = \"ate\",   estimand_fun_deriv0 = NULL,   estimand_fun_deriv1 = NULL,   verbose = options::opt(\"verbose\"),   ... )"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. details model specification given ‘Details’ glm documentation. group_indicator (name ) binary variable data identifies randomisation groups. variable required binary make \"orientation\" estimand_fun clear. family description error distribution link     function used model.  glm can     character string naming family function, family function     result call family function.  glm.fit     third option supported.  (See family details     family functions.) data optional data frame, list environment (object     coercible .data.frame data frame) containing     variables model.  found data,     variables taken environment(formula),     typically environment glm called. group_allocation_prob numeric probabiliy assigned \"group 1\" (rather group 0). default, ratio 1's data used. estimand_fun function arguments psi0 psi1 specifying estimand. Alternative, specify \"ate\" \"rate_ratio\" character use one default estimand functions. See details \"Estimand\" section documentation. estimand_fun_deriv0 function specifying derivative estimand_fun wrt. psi0. default algorithm use symbolic differentiation automatically find derivative estimand_fun estimand_fun_deriv1 function specifying derivative estimand_fun wrt. psi1. default algorithm use symbolic differentiation automatically find derivative estimand_fun verbose numeric verbosity level. Higher values means information printed console. value 0 means nothing printed console execution (Defaults 2, overwritable using option 'PostCard.verbose' environment variable 'R_POSTCARD_VERBOSE') ... Additional arguments passed stats::glm()","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"rctglm returns object class inheriting \"rctglm\". function estimand (short-hand version est) can used extract data.frame estimated value standard error estimand. method generic coef added rctglm (.e., coef.rctglm), uses method coef.glm extract coefficient information underlying glm fit procedure. object class rctglm list containing following components: estimand: data.frame plug-estimate estimand, standard error (SE) estimate variance estimate estimand estimand_fun: function used obtain estimate estimand counterfactual means means_counterfactual: data.frame counterfactual means psi0 psi1 fitted.values_counterfactual: data.frame counterfactual mean values, obtained transforming linear predictors group inverse link function. glm: glm object returned running stats::glm within procedure call: matched call","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"procedure assumes setup randomised clinical trial observations grouped binary group_indicator variable, allocated randomly probability group_allocation_prob. GLM fit used predict response observations event group_indicator 0 1, respectively. Taking means predictions produce counterfactual means psi0 psi1, estimand r(psi0, psi1) calculated using specified estimand_fun. variance estimand found taking variance influence function estimand. method inference using plug-estimation influence functions variance produces causal estimate estimand, stated articles XXXX.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"estimands","dir":"Reference","previous_headings":"","what":"Estimands","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"noted description, psi0 psi1 counterfactual means found prediction using fitted GLM binary groups defined group_indicator. Default estimand functions can specified via \"ate\" (uses function function(psi1, psi0) psi1-psi0) \"rate_ratio\" (uses function function(psi1, psi0) psi1/psi0). See information specifying estimand_fun section Specifying estimand vignette vignette(\"-details\"). default, Deriv package used perform symbolic differentiation find derivatives estimand_fun.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"","code":"# Generate some data to showcase example n <- 100 dat_gaus <- glm_data(   1+1.5*X1+2*A,   X1 = rnorm(n),   A = rbinom(n, 1, .5),   family = gaussian() )  # Fit the model ate <- rctglm(formula = Y ~ .,               group_indicator = A,               data = dat_gaus,               family = gaussian) #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.43 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi0' as: '-1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi1' as: '1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`  # Pull information on estimand estimand(ate) #>   Estimate Std. Error #> 1 2.289558  0.2056714  ## Another example with different family and specification of estimand_fun dat_binom <- glm_data(   1+1.5*X1+2*A,   X1 = rnorm(n),   A = rbinom(n, 1, .5),   family = binomial() )  rr <- rctglm(formula = Y ~ .,               group_indicator = A,               data = dat_binom,               family = binomial(),               estimand_fun = \"rate_ratio\") #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.55 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1/psi0' with respect to 'psi0' as: '-(psi1/psi0^2)'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1/psi0' with respect to 'psi1' as: '1/psi0'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`  odds_ratio <- function(psi1, psi0) (psi1*(1-psi0))/(psi0*(1-psi1)) or <- rctglm(formula = Y ~ .,               group_indicator = A,               data = dat_binom,               family = binomial,               estimand_fun = odds_ratio) #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.55 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function '(psi1 * (1 - psi0))/(psi0 * (1 - psi1))' with respect to 'psi0' as: '{     .e1 <- 1 - psi1     .e2 <- psi0 * .e1     -(psi1 * ((1 - psi0) * .e1/.e2^2 + 1/.e2)) }'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function '(psi1 * (1 - psi0))/(psi0 * (1 - psi1))' with respect to 'psi1' as: '{     .e2 <- psi0 * (1 - psi1)     (1 - psi0) * (1/.e2 + psi0 * psi1/.e2^2) }'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for objects of class rctglm — rctglm_methods","title":"Methods for objects of class rctglm — rctglm_methods","text":"Methods mostly extract information model fit inference. See details information method.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for objects of class rctglm — rctglm_methods","text":"","code":"estimand(object)  # S3 method for class 'rctglm' estimand(object)  est(object)  # S3 method for class 'rctglm' coef(object, ...)  # S3 method for class 'rctglm' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for objects of class rctglm — rctglm_methods","text":"object object class rctglm ... additional arguments passed methods x object class rctglm digits numeric number digits display printing","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for objects of class rctglm — rctglm_methods","text":"estimand short-hand form est methods extracting estimated estimand value well standard error (SE) variance estimand. functions shortcut extract list element estimand rctglm class object. coef just use corresponding glm methods glm fit contained within rctglm object. Thus, function shortcuts running coef(x$glm).","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for objects of class rctglm — rctglm_methods","text":"","code":"# Generate some data to showcase example n <- 100 dat_binom <- glm_data(   1+1.5*X1+2*A,   X1 = rnorm(n),   A = rbinom(n, 1, .5),   family = binomial() )  # Fit the model ate <- rctglm(formula = Y ~ .,               group_indicator = A,               data = dat_binom,               family = binomial,               estimand_fun = \"ate\") #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.46 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi0' as: '-1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi1' as: '1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`  print(ate) #>  #> Object of class rctglm  #>  #> Call:  rctglm(formula = Y ~ ., group_indicator = A, family = binomial,  #>     data = dat_binom, estimand_fun = \"ate\") #>  #> Counterfactual control mean (psi_0=E[Y|X, A=0]) estimate: 0.6977 #> Counterfactual control mean (psi_1=E[Y|X, A=1]) estimate: 0.9403 #> Estimand function r: psi1 - psi0 #> Estimand (r(psi_1, psi_0)) estimate (SE): 0.2426 (0.06541) estimand(ate) #>    Estimate Std. Error #> 1 0.2426473 0.06541008 coef(ate) #> (Intercept)          X1           A  #>    1.099633    1.422773    2.338221"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"procedure uses fit_best_learner fit prognostic model historical data uses model produce counterfactual predictions prognostic score adjusted covariate rctglm procedure.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"","code":"rctglm_with_prognosticscore(   formula,   family,   data,   group_indicator,   group_allocation_prob = NULL,   estimand_fun = \"ate\",   estimand_fun_deriv0 = NULL,   estimand_fun_deriv1 = NULL,   ...,   data_hist,   prog_formula = NULL,   cv_folds = 5,   learners = default_learners(),   verbose = options::opt(\"verbose\") )"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. details model specification given ‘Details’ glm documentation. family description error distribution link     function used model.  glm can     character string naming family function, family function     result call family function.  glm.fit     third option supported.  (See family details     family functions.) data optional data frame, list environment (object     coercible .data.frame data frame) containing     variables model.  found data,     variables taken environment(formula),     typically environment glm called. group_indicator (name ) binary variable data identifies randomisation groups. variable required binary make \"orientation\" estimand_fun clear. group_allocation_prob numeric probabiliy assigned \"group 1\" (rather group 0). default, ratio 1's data used. estimand_fun function arguments psi0 psi1 specifying estimand. Alternative, specify \"ate\" \"rate_ratio\" character use one default estimand functions. See details \"Estimand\" section documentation. estimand_fun_deriv0 function specifying derivative estimand_fun wrt. psi0. default algorithm use symbolic differentiation automatically find derivative estimand_fun estimand_fun_deriv1 function specifying derivative estimand_fun wrt. psi1. default algorithm use symbolic differentiation automatically find derivative estimand_fun ... Additional arguments passed stats::glm() data_hist data.frame historical data fit prognostic model prog_formula character numeric formula fitting prognostic model historical data data_hist. Default models response (assumed formula) using columns data_hist data cv_folds numeric number cross-validation folds used fitting evaluating models learners list tidymodels verbose numeric verbosity level. Higher values means information printed console. value 0 means nothing printed console execution (Defaults 2, overwritable using option 'PostCard.verbose' environment variable 'R_POSTCARD_VERBOSE')","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"rctglm_with_prognosticscore returns object class rctglm_prog, inherits rctglm. Due inheritance, methods described Value section rctglm rctglm_methods also work extracting information object. rctglm_prog object list components rctglm object, additional list element : prognostic_info: List information fitted prognostic model historical data. components: formula: formula symbolic description response modelled function covariates models model_fit: trained workflow - result fit_best_learner learners: list learners used discrete super learner cv_folds: amount folds used cross validation data: historical data used cross validation fitting testing models","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"details prognostic models scores predictions counterfactual means control group.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"","code":"# Generate some data n <- 100 b0 <- 1 b1 <- 1.5 b2 <- 2 W1 <- runif(n, min = -2, max = 2)  dat_treat <- glm_data(   b0+b1*abs(sin(W1))+b2*A,   W1 = W1,   A = rbinom (n, 1, .5) )  dat_notreat <- glm_data(   b0+b1*abs(sin(W1)),   W1 = W1 )  ate <- rctglm_with_prognosticscore(   formula = Y ~ .,   group_indicator = A,   data = dat_treat,   family = gaussian(),   estimand_fun = \"ate\",   data_hist = dat_notreat) #>  #> ── Fitting prognostic model ── #>  #> ℹ Created formula for fitting prognostic model as: Y ~ . #> ℹ Fitting learners #> • mod_mars #> • mod_lm #> • mod_gbt #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 1 of 3 resampling: mod_mars #> ✔ 1 of 3 resampling: mod_mars (119ms) #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 2 of 3 resampling: mod_lm #> ✔ 2 of 3 resampling: mod_lm (92ms) #> i 3 of 3 tuning:     mod_gbt #> ✔ 3 of 3 tuning:     mod_gbt (941ms) #> ℹ Model with lowest RMSE: mod_gbt #> ℹ Investigate trained learners and fitted model in `prognostic_info` list element #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.54 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi0' as: '-1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi1' as: '1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`  # Pull information on estimand estimand(ate) #>   Estimate Std. Error #> 1 1.943811  0.1914326"},{"path":[]},{"path":"https://nnpackages.github.io/PostCard/news/index.html","id":"version-development-version-development-version","dir":"Changelog","previous_headings":"","what":"Version 1.0.0.9000 (development version)","title":"PostCard (development version)","text":"Removed lot functionalities specific simulation data added functionalities specific prognostic covariate adjustment. includes addition funcions: - rctglm - rctglm_with_prognosticscore - fit_best_learner","code":""},{"path":"https://nnpackages.github.io/PostCard/news/index.html","id":"version-development-version-development-version-1","dir":"Changelog","previous_headings":"","what":"Version 0.2.0.9000 (development version)","title":"PostCard (development version)","text":"Added function simulate_collection takes function arguments simulate covariates model outcome historical “current” data give user full flexibility. sim.lm simulates data multivariate normal distribution models outcome linear model now wrapper simulate_collection.","code":""},{"path":"https://nnpackages.github.io/PostCard/news/index.html","id":"version-development-version","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"PostCard (development version)","text":"Package functions simulate analyse data specific case multivariate normal distribution covariates linear model outcome.","code":""}]
