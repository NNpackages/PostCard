[{"path":"https://nnpackages.github.io/PostCard/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Postcard authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"controlling-verbosity","dir":"Articles","previous_headings":"","what":"Controlling verbosity","title":"More details on usage of package","text":"See package level options documentation options(), giving information change package behavior options environmental variables. option verbose, controls amount information printed console. default, verbose = 2, meaning various information printed throughout algorithm. Change verbose = 1 little less information verbose = 0 information Throughout examples vignette, visible kind information printed user.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"plug-in-estimation-of-marginal-effects-and-variance-estimation-using-influence-functions","dir":"Articles","previous_headings":"","what":"Plug-in estimation of marginal effects and variance estimation using influence functions","title":"More details on usage of package","text":"README examples, simulate data using glm_data() function package.","code":"n <- 1000 b0 <- 1 b1 <- 3 b2 <- 2  # Simulate data with a non-linear effect dat_pois <- glm_data(   b0+b1*sin(W)^2+b2*A,   W = runif(n, min = -2, max = 2),   A = rbinom(n, 1, .5),   family = poisson(link = \"log\") # Default value ) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"changing-the-estimand","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Changing the estimand","title":"More details on usage of package","text":"default estimand_fun rctglm() rctglm_with_prognosticscore() average treatment effect (ATE). However, ’s possible specify estimand.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"built-in-estimands---average-treatment-effect-and-rate-ratio","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Changing the estimand","what":"Built-in estimands - average treatment effect and rate ratio","title":"More details on usage of package","text":"Built ATE rate ratio, can specified character strings. apparent documentation rctglm() rctglm_with_prognosticscore(), default estimand_fun \"ate\", similarly user can specify estimand_fun = \"ratio_ratio\" use estimand function psi1 / psi0 seen :","code":"rate_ratio <- rctglm(   formula = Y ~ A + W,   group_indicator = A,   data = dat_pois,   family = \"poisson\",   estimand_fun = \"rate_ratio\") #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.501 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1/psi0' with respect to 'psi0' as: '-(psi1/psi0^2)'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1/psi0' with respect to 'psi1' as: '1/psi0'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1` rate_ratio #> Object of class 'rctglm' #>  #> Call:  rctglm(formula = Y ~ A + W, group_indicator = A, family = \"poisson\",  #>     data = dat_pois, estimand_fun = \"rate_ratio\") #>  #> - Counterfactual control mean (Psi_0=E[Y|X, A=0]) estimate: 25.5 #> - Counterfactual control mean (Psi_1=E[Y|X, A=1]) estimate: 198 #> - Estimand function r: psi1/psi0 #> - Estimand (r(Psi_1, Psi_0)) estimate (SE): 7.77 (0.0322)"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"specifying-any-estimand","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Changing the estimand","what":"Specifying any estimand","title":"More details on usage of package","text":"’s possible specify function 2 named arguments, psi0 psi1, estimand function estimand_fun. example showing estimand function can specified. Note information printed console automatic differentiation performed estimand_fun, used calculation influence function marginal effect.","code":"nonsense_estimand_fun <- function(psi1, psi0) {   psi1 / sqrt(psi0) * 2 - 1 }  nonsense_estimand <- rctglm(   formula = Y ~ A * W,   group_indicator = A,   data = dat_pois,   family = poisson(),   estimand_fun = nonsense_estimand_fun,   verbose = 0) nonsense_estimand #> Object of class 'rctglm' #>  #> Call:  rctglm(formula = Y ~ A * W, group_indicator = A, family = poisson(),  #>     data = dat_pois, estimand_fun = nonsense_estimand_fun, verbose = 0) #>  #> - Counterfactual control mean (Psi_0=E[Y|X, A=0]) estimate: 25.4 #> - Counterfactual control mean (Psi_1=E[Y|X, A=1]) estimate: 198 #> - Estimand function r: { #>     psi1/sqrt(psi0) * 2 - 1 #> } #> - Estimand (r(Psi_1, Psi_0)) estimate (SE): 77.5 (0.905)"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"prognostic-covariate-adjustment","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Prognostic covariate adjustment","title":"More details on usage of package","text":"rctglm_with_prognosticscore() uses function fit_best_learner() fit prognostic model historical data, data_hist. Thereafter, model used predict prognostic scores observations data using scores covariate performing plug-etimation GLM using rctglm. default behavior fit_best_learner() subsequently rctglm_with_prognosticscore() fit discrete super learner (discrete avoid overfitting) finding model lowest RMSE among linear regression, Multivariate adaptive regression spline (MARS) boosted trees. algorithm uses default 5 folds cross validation tries construct formula used prognostic model modelling response design matrix containing intercept main effect variables historical data, data_hist.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"specifying-learners","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Prognostic covariate adjustment","what":"Specifying learners","title":"More details on usage of package","text":"’s easy user specify learners train order fit discrete super learner. package utilises framework tidymodels. user needs specify list models.","code":""},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"code-used-for-default-learners","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Prognostic covariate adjustment > Specifying learners","what":"Code used for default learners","title":"More details on usage of package","text":"illustrate, code unexported function default_learners creates list default learners:","code":"PostCard:::default_learners #> function ()  #> { #>     list(mars = list(model = parsnip::mars(mode = \"regression\",  #>         prod_degree = 3) %>% parsnip::set_engine(\"earth\"), grid = NULL),  #>         lm = list(model = parsnip::linear_reg() %>% parsnip::set_engine(\"lm\"),  #>             grid = NULL), gbt = list(model = parsnip::boost_tree(mode = \"regression\",  #>             trees = parsnip::tune(\"trees\"), tree_depth = parsnip::tune(\"tree_depth\"),  #>             learn_rate = 0.1) %>% parsnip::set_engine(\"xgboost\"),  #>             grid = data.frame(trees = seq(from = 25, to = 500,  #>                 by = 25), tree_depth = 3))) #> } #> <bytecode: 0x563c1074d200> #> <environment: namespace:PostCard>"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"creating-own-list-of-learners","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Prognostic covariate adjustment > Specifying learners","what":"Creating own list of learners","title":"More details on usage of package","text":"first simulate data run example listing models available tidymodels website, user can specify list models along specified values parameters learners argument.","code":"# Generate some data n <- 1000 b0 <- 1 b1 <- 1.5 b2 <- 2 W_sim <- runif(n, min = -2, max = 2)  dat_treat <- glm_data(   b0+b1*abs(sin(W))+b2*A,   W = W_sim,   A = rbinom (n, 1, .5) )  dat_notreat <- glm_data(   b0+b1*abs(sin(W)),   W = W_sim ) learners <- list(   rf = list(     model = parsnip::rand_forest(       mode = \"regression\",       trees = 500,       min_n = 5     ) %>%        parsnip::set_engine(\"ranger\")   ),   svm.linear = list(     model = parsnip::svm_linear(       mode = \"regression\",       cost = 1,       margin = 0.1) %>%      parsnip::set_engine(\"LiblineaR\")   ) )  model_own_learners <- rctglm_with_prognosticscore(   formula = Y ~ A * W,   group_indicator = A,   data = dat_treat,   family = gaussian(),   data_hist = dat_notreat,   learners = learners) #>  #> ── Fitting prognostic model ── #>  #> ℹ Created formula for fitting prognostic model as: Y ~ . #> ℹ Fitting learners #> • mod_rf #> • mod_svm.linear #> i  No tuning parameters. `fit_resamples()` will be attempted #> i 1 of 2 resampling: mod_rf #> ✔ 1 of 2 resampling: mod_rf (1.5s) #> i  No tuning parameters. `fit_resamples()` will be attempted #> i 2 of 2 resampling: mod_svm.linear #> ✔ 2 of 2 resampling: mod_svm.linear (113ms) #> ℹ Model with lowest RMSE: mod_svm.linear #> ℹ Investigate trained learners and fitted model in `prognostic_info` list element #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.529 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi0' as: '[1] -1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi1' as: '[1] 1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`"},{"path":"https://nnpackages.github.io/PostCard/articles/more-details.html","id":"investigating-the-prognostic-model","dir":"Articles","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions > Prognostic covariate adjustment","what":"Investigating the prognostic model","title":"More details on usage of package","text":"’s possible view information regarding fit prognostic model rctglm class object rctglm_with_prognosticscore() returns looking list element prognostic_info. Inside list element elements model_fit: result fit_best_learner() leaners: list learners used cv_folds: number folds used cross validation","code":"model_own_learners$prognostic_info #> $model_fit #> ══ Workflow [trained] ══════════════════════════════════════════════════════════ #> Preprocessor: Formula #> Model: svm_linear() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> Y ~ . #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> $TypeDetail #> [1] \"L2-regularized L2-loss support vector regression primal (L2R_L2LOSS_SVR)\" #>  #> $Type #> [1] 11 #>  #> $W #>                W     Bias #> [1,] 0.008079305 2.087292 #>  #> $Bias #> [1] 1 #>  #> $NbClass #> [1] 2 #>  #> attr(,\"class\") #> [1] \"LiblineaR\" #>  #> $learners #> $learners$rf #> $learners$rf$model #> Random Forest Model Specification (regression) #>  #> Main Arguments: #>   trees = 500 #>   min_n = 5 #>  #> Computational engine: ranger  #>  #>  #>  #> $learners$svm.linear #> $learners$svm.linear$model #> Linear Support Vector Machine Model Specification (regression) #>  #> Main Arguments: #>   cost = 1 #>   margin = 0.1 #>  #> Computational engine: LiblineaR  #>  #>  #>  #>  #> $cv_folds #> [1] 5"},{"path":"https://nnpackages.github.io/PostCard/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mathias Lerbech Jeppesen. Author, maintainer. Emilie Hoejbjerre-Frandsen. Author.","code":""},{"path":"https://nnpackages.github.io/PostCard/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jeppesen M, Hoejbjerre-Frandsen E (2024). PostCard: Prognostic covariate adjustment estimation estimands. R package version 1.0.0.9000, https://nnpackages.github.io/PostCard/.","code":"@Manual{,   title = {PostCard: Prognostic covariate adjustment for estimation of estimands},   author = {Mathias Lerbech Jeppesen and Emilie Hoejbjerre-Frandsen},   year = {2024},   note = {R package version 1.0.0.9000},   url = {https://nnpackages.github.io/PostCard/}, }"},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"postcard","dir":"","previous_headings":"","what":"Prognostic covariate adjustment for estimation of estimands","title":"Prognostic covariate adjustment for estimation of estimands","text":"PostCard package PrOgnoSTic CovARiate aDjustment randomised clinical trials. time writing, package features convenient functions conducting analysis using prognostic covariate adjustment GLMs. package uses plug-estimation robust estimation marginal effect estimand influence functions robust estimation variance estimand.","code":""},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prognostic covariate adjustment for estimation of estimands","text":"can install development version PostCard GitHub :","code":"pak::pak(\"NNpackages/PostCard\") library(PostCard) withr::local_seed(1395878) withr::local_options(list(PostCard.verbose = 0))"},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"simulating-data-for-exploratory-analyses","dir":"","previous_headings":"","what":"Simulating data for exploratory analyses","title":"Prognostic covariate adjustment for estimation of estimands","text":"First, simulate data able enable showcasing functionalities. use glm_data() function package, user can specify expression alongside variables family response simulate response GLM linear predictor given expression provided.","code":"n <- 1000 b0 <- 1 b1 <- 3 b2 <- 2  # Simulate data with a non-linear effect dat_treat <- glm_data(   b0+b1*sin(W)^2+b2*A,   W = runif(n, min = -2, max = 2),   A = rbinom(n, 1, .5),   family = gaussian() # Default value )"},{"path":[]},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"fitting-rctglm-without-prognostic-covariate-adjustment","dir":"","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Fitting rctglm() without prognostic covariate adjustment","title":"Prognostic covariate adjustment for estimation of estimands","text":"rctglm() function estimates specified estimand using plug-estimation randomised clinical trials estimates variance using influence function marginal effect estimand. interface rctglm() similar stats::glm() function added mandatory specification randomisation variable data, usually (name ) treatment variable default, ratio 1’s data used default, function takes average treatment effect (ATE) estimand Thus, can estimate ATE simply writing : Note default, information algorithm printed console, suppress behavior. See vignette(\"non-default\"). creates rctglm() object prints ","code":"ate <- rctglm(formula = Y ~ A * W,               group_indicator = A,               data = dat_treat,               family = \"gaussian\") # Default value ate #> Object of class 'rctglm' #>  #> Call:  rctglm(formula = Y ~ A * W, group_indicator = A, family = \"gaussian\",  #>     data = dat_treat) #>  #> - Counterfactual control mean (Psi_0=E[Y|X, A=0]) estimate: 2.78 #> - Counterfactual control mean (Psi_1=E[Y|X, A=1]) estimate: 4.87 #> - Estimand function r: psi1 - psi0 #> - Estimand (r(Psi_1, Psi_0)) estimate (SE): 2.09 (0.0921)"},{"path":"https://nnpackages.github.io/PostCard/index.html","id":"using-prognostic-covariate-adjustment","dir":"","previous_headings":"Plug-in estimation of marginal effects and variance estimation using influence functions","what":"Using prognostic covariate adjustment","title":"Prognostic covariate adjustment for estimation of estimands","text":"rctglm_with_prognosticscore() function uses fit_best_learner() function fit prognostic model historical data uses prognostic model predict observations current data set. prognostic scores used covariate GLM running rctglm(). Allowing use complex non-linear models create prognostic score allows utilising information potentially many variables, “catching” non-linear relationships using information GLM model using single covariate adjustment. simulate historical data showcase use function well: call rctglm_with_prognosticscore() rctglm() added specification (Historical) data fit prognostic model using fit_best_learner() Default uses covariates data. (Optionally) number folds cross validation list learners fitting best learner Thus, simple call estimates average treatment effect, adjusting prognostic score, seen : Quick results fit can seen printing object: ’s evident case non-linear relationship covariate observe response, adjusting prognostic score reduces standard error estimand approximation quite bit.","code":"dat_notreat <- glm_data(   b0+b1*sin(W)^2,   W = runif(n, min = -2, max = 2),   family = gaussian # Default value ) ate_prog <- rctglm_with_prognosticscore(   formula = Y ~ A * W,   group_indicator = A,   data = dat_treat,   family = gaussian(link = \"identity\"), # Default value   data_hist = dat_notreat) ate_prog #> Object of class 'rctglm' #>  #> Call:  rctglm_with_prognosticscore(formula = Y ~ A * W, family = gaussian(link = \"identity\"),  #>     data = dat_treat, group_indicator = A, data_hist = dat_notreat) #>  #> - Counterfactual control mean (Psi_0=E[Y|X, A=0]) estimate: 2.83 #> - Counterfactual control mean (Psi_1=E[Y|X, A=1]) estimate: 4.82 #> - Estimand function r: psi1 - psi0 #> - Estimand (r(Psi_1, Psi_0)) estimate (SE): 1.99 (0.0641)"},{"path":"https://nnpackages.github.io/PostCard/reference/PostCard-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PostCard: Prognostic covariate adjustment for estimation of estimands — PostCard-package","title":"PostCard: Prognostic covariate adjustment for estimation of estimands — PostCard-package","text":"Convenient functions conducting analysis using prognostic covariate adjustment GLMs. package uses plug-estimation robust estimation estimand influence functions robust estimation variance estimand.","code":""},{"path":[]},{"path":"https://nnpackages.github.io/PostCard/reference/PostCard-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PostCard: Prognostic covariate adjustment for estimation of estimands — PostCard-package","text":"Maintainer: Mathias Lerbech Jeppesen mathiasljeppesen@outlook.com Authors: Emilie Hoejbjerre-Frandsen ehfd@novonordisk.com","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/estimand.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for extracting estimand — estimand","title":"Generic for extracting estimand — estimand","text":"Generic extracting estimand","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/estimand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for extracting estimand — estimand","text":"","code":"estimand(x, ...)"},{"path":"https://nnpackages.github.io/PostCard/reference/estimand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for extracting estimand — estimand","text":"x object class dispatch ... additional arguments passed methods","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"Find best learner terms RMSE among specified learners using cross validation","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"","code":"fit_best_learner(   data,   formula,   cv_folds = 5,   learners = default_learners(),   verbose = options::opt(\"verbose\") )"},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"data optional data frame, list environment (object     coercible .data.frame data frame) containing     variables model.  found data,     variables taken environment(formula),     typically environment glm called. formula object class \"formula\" (one     can coerced class): symbolic description     model fitted.  details model specification given     ‘Details’. cv_folds numeric number cross-validation folds used fitting evaluating models learners list tidymodels. Default uses combination MARS, linear regression boosted trees verbose numeric verbosity level specifying much information printed user (Defaults 2, overwritable using option 'PostCard.verbose' environment variable 'R_POSTCARD_VERBOSE')","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"trained workflow","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/fit_best_learner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the best learner in terms of RMSE among specified learners using cross validation — fit_best_learner","text":"","code":"# Generate some \"historical\" data of a control treatment n <- 100 w1 <- runif(n, min = -2, max = 2) x1 <- abs(sin(w1)) a <- rbinom (n, 1, .5) b0 <- 1 b1 <- 1.5 b2 <- 2  truemean_notreat <- b0+b1*x1 y_notreat <- rnorm(n, mean = truemean_notreat, sd = 1) dat_hist <- data.frame(Y = y_notreat, W = w1)  # Fit a learner to the data with default learners fit <- fit_best_learner(Y ~ ., data = dat_hist) #> ℹ Fitting learners #> • mod_mars #> • mod_lm #> • mod_gbt #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 1 of 3 resampling: mod_mars #> ✔ 1 of 3 resampling: mod_mars (184ms) #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 2 of 3 resampling: mod_lm #> ✔ 2 of 3 resampling: mod_lm (91ms) #> i 3 of 3 tuning:     mod_gbt #> ✔ 3 of 3 tuning:     mod_gbt (937ms) #> ℹ Model with lowest RMSE: mod_gbt"},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data simulated from a GLM — glm_data","title":"Generate data simulated from a GLM — glm_data","text":"Provide formula, variables family generate linear predictor using formula provided variables using inverse link family generate GLM modelled mean, mu, used simulate response mean generating function according chosen family.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data simulated from a GLM — glm_data","text":"","code":"glm_data(   formula_eta,   ...,   family = gaussian(),   family_args = list(sd = 1),   response_name = \"Y\" )"},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data simulated from a GLM — glm_data","text":"formula_eta expression specifying generate mean response (together inverse link family) ... data.frame columns corresponding variables used formula_eta, named list variables, individually provided named arguments variables family family response. can character string naming family function, family function result call family function family_args named list values arguments passed family relevant r<family_name> function simulating data response_name character giving name simulated response","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data simulated from a GLM — glm_data","text":"data.frame","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/glm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data simulated from a GLM — glm_data","text":"","code":"# Generate a gaussian response from a single covariate glm_data(1+2*x1,                 x1 = rnorm(10)) #>             Y         x1 #> 1  -2.0993523 -0.3597136 #> 2   1.3803117 -0.1086270 #> 3   4.7834135  1.8277865 #> 4  -4.6407073 -1.9619177 #> 5   2.9280752  0.9459828 #> 6   3.1051919  0.5489621 #> 7   0.5581786 -0.5774653 #> 8  -2.5665320 -1.2282849 #> 9   3.2284699  1.0395321 #> 10  1.5250613  0.4556020  # Generate a gaussian response from a single covariate with # non-linear effects glm_data(1+2*abs(sin(x1)),                 x1 = runif(10, min = -2, max = 2)) #>           Y         x1 #> 1  2.982812 -0.3645845 #> 2  2.765510 -0.5565052 #> 3  3.192723  0.6100402 #> 4  1.768523 -1.4257631 #> 5  2.703715  0.7231945 #> 6  2.914777  1.4371436 #> 7  3.233507  1.3545200 #> 8  3.328234  1.5252517 #> 9  3.018810 -1.0492090 #> 10 2.047321  0.3145234  # Generate a negative binomial response glm_data(1+2*x1-x2,                 x1 = rnorm(10),                 x2 = rgamma(10, shape = 2),                 family = MASS::negative.binomial(2)) #>    Y         x1         x2 #> 1  1 -0.1209674 0.37081227 #> 2  1  0.4582423 2.04115261 #> 3  0  0.6165347 3.69306068 #> 4  0 -0.1750488 1.97369911 #> 5  0 -0.1228313 2.40876607 #> 6  0 -1.4726915 3.06537971 #> 7  0  0.1236927 0.05520964 #> 8  0 -1.0955924 1.82646237 #> 9  1  0.3883423 3.71799172 #> 10 0 -0.7550303 1.30834183  # Provide variables as a list/data.frame glm_data(1+2*x1-x2,                 data.frame(                   x1 = rnorm(10),                   x2 = rgamma(10, shape = 2)                 ),                 family = MASS::negative.binomial(2)) #>    Y          x1         x2 #> 1  0 -0.15401329 0.09544077 #> 2  0 -0.05892959 0.65405248 #> 3  0 -0.53258072 0.26243470 #> 4  2  1.07907227 1.72699254 #> 5  2  0.87461531 0.76655304 #> 6  0 -0.66601844 1.33477946 #> 7  0 -1.12627593 1.11398868 #> 8  0 -0.36943564 0.81570337 #> 9  0 -1.18159506 0.97868209 #> 10 1  0.05931762 2.24684486"},{"path":"https://nnpackages.github.io/PostCard/reference/options.html","id":null,"dir":"Reference","previous_headings":"","what":"PostCard Options — options","title":"PostCard Options — options","text":"Internally used, package-specific options. options prioritize R options() values, fall back environment variables undefined. neither option environment variable set, default value used.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PostCard Options — options","text":"verbose numeric verbosity level specifying much information printed user (Defaults 2, overwritable using option 'PostCard.verbose' environment variable 'R_POSTCARD_VERBOSE')","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/options.html","id":"checking-option-values","dir":"Reference","previous_headings":"","what":"Checking Option Values","title":"PostCard Options — options","text":"Option values specific PostCard can accessed passing package name env.","code":"options::opts(env = \"PostCard\")  options::opt(x, default, env = \"PostCard\")"},{"path":"https://nnpackages.github.io/PostCard/reference/options.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"PostCard Options — options","text":"verbose default: 2 option: PostCard.verbose envvar: R_POSTCARD_VERBOSE (evaluated possible, raw string otherwise)","code":"2"},{"path":[]},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"procedure uses plug--estimation influence functions perform robust inference specified estimand setting randomised clinical trial, even case heterogeneous effect covariates randomisation groups.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"","code":"rctglm(   formula,   group_indicator,   family,   data,   group_allocation_prob = NULL,   estimand_fun = \"ate\",   estimand_fun_deriv0 = NULL,   estimand_fun_deriv1 = NULL,   verbose = options::opt(\"verbose\"),   ... )"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"formula object class \"formula\" (one     can coerced class): symbolic description     model fitted.  details model specification given     ‘Details’. group_indicator (name ) variable data identifies randomisation groups family description error distribution link     function used model.  glm can     character string naming family function, family function     result call family function.  glm.fit     third option supported.  (See family details     family functions.) data optional data frame, list environment (object     coercible .data.frame data frame) containing     variables model.  found data,     variables taken environment(formula),     typically environment glm called. group_allocation_prob numeric probabiliy assigned \"group 1\" (rather group 0). default, ratio 1's data used. estimand_fun character specifying default estimand function, function arguments psi0 psi1 specifying estimand. estimand_fun_deriv0 function specifying derivative estimand_fun wrt. psi0. default algorithm use symbolic differentiation automatically find derivative estimand_fun estimand_fun_deriv1 function specifying derivative estimand_fun wrt. psi1. default algorithm use symbolic differentiation automatically find derivative estimand_fun verbose numeric verbosity level specifying much information printed user (Defaults 2, overwritable using option 'PostCard.verbose' environment variable 'R_POSTCARD_VERBOSE') ... Additional arguments passed stats::glm()","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"rctglm object","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"procedure assumes setup randomised clinical trial observations grouped binary group_indicator variable, allocated randomly probability group_allocation_prob. GLM fit used predict response observations event group_indicator 0 1, respectively. Taking means predictions prodeuce counterfactual means psi0 psi1, estimand r(psi0, psi1) calculated using specified estimand_fun. variance estimand found taking variance influence function estimand. method inference using plug-estimation influence functions variance produces causal estimate estimand, stated articles XXXX.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"estimands","dir":"Reference","previous_headings":"","what":"Estimands","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"noted description, psi0 psi1 counterfactual means found prediction using fitted GLM binary groups defined group_indicator. Default estimand functions can specified via \"ate\" (taking difference psi1 - psi0) \"rate_ratio\" (taking ratio psi1 / psi0) default, Deriv package used perform symbolic differentiation find derivatives estimand_fun.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit GLM and find any estimand (marginal effect) using plug-in estimation with variance estimation using influence functions — rctglm","text":"","code":"# Generate some data to showcase example n <- 100 dat_binom <- glm_data(   1+1.5*X1+2*A,   X1 = rnorm(n),   A = rbinom(n, 1, .5),   family = binomial() )  # Fit the model ate <- rctglm(formula = Y ~ .,               group_indicator = A,               data = dat_binom,               family = binomial,               estimand_fun = \"ate\") #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.53 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi0' as: '[1] -1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi1' as: '[1] 1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"procedure uses fit_best_learner fit prognostic model historical data uses model produce counterfactual predictions prognostic score adjusted covariate rctglm procedure.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"","code":"rctglm_with_prognosticscore(   formula,   family,   data,   group_indicator,   group_allocation_prob = NULL,   estimand_fun = \"ate\",   estimand_fun_deriv0 = NULL,   estimand_fun_deriv1 = NULL,   ...,   data_hist,   prog_formula = NULL,   cv_folds = 5,   learners = default_learners(),   verbose = options::opt(\"verbose\") )"},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"formula object class \"formula\" (one     can coerced class): symbolic description     model fitted.  details model specification given     ‘Details’. family description error distribution link     function used model.  glm can     character string naming family function, family function     result call family function.  glm.fit     third option supported.  (See family details     family functions.) data optional data frame, list environment (object     coercible .data.frame data frame) containing     variables model.  found data,     variables taken environment(formula),     typically environment glm called. group_indicator (name ) variable data identifies randomisation groups group_allocation_prob numeric probabiliy assigned \"group 1\" (rather group 0). default, ratio 1's data used. estimand_fun character specifying default estimand function, function arguments psi0 psi1 specifying estimand. estimand_fun_deriv0 function specifying derivative estimand_fun wrt. psi0. default algorithm use symbolic differentiation automatically find derivative estimand_fun estimand_fun_deriv1 function specifying derivative estimand_fun wrt. psi1. default algorithm use symbolic differentiation automatically find derivative estimand_fun ... Additional arguments passed stats::glm() data_hist data.frame historical data fit prognostic model prog_formula character numeric formula fitting prognostic model historical data data_hist. Default models response (assumed formula) using columns data_hist data cv_folds numeric number cross-validation folds used fitting evaluating models learners list tidymodels. Default uses combination MARS, linear regression boosted trees verbose numeric verbosity level specifying much information printed user (Defaults 2, overwritable using option 'PostCard.verbose' environment variable 'R_POSTCARD_VERBOSE')","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"rctglm object, fitted prognostic score covariate model","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"details prognostic models scores predictions counterfactual means control group.","code":""},{"path":"https://nnpackages.github.io/PostCard/reference/rctglm_with_prognosticscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use prognostic covariate adjustment when fitting an rctglm — rctglm_with_prognosticscore","text":"","code":"# Generate some data n <- 100 b0 <- 1 b1 <- 1.5 b2 <- 2 W1 <- runif(n, min = -2, max = 2)  dat_treat <- glm_data(   b0+b1*abs(sin(W1))+b2*A,   W1 = W1,   A = rbinom (n, 1, .5) )  dat_notreat <- glm_data(   b0+b1*abs(sin(W1)),   W1 = W1 )  ate <- rctglm_with_prognosticscore(   formula = Y ~ .,   group_indicator = A,   data = dat_treat,   family = gaussian(),   estimand_fun = \"ate\",   data_hist = dat_notreat) #>  #> ── Fitting prognostic model ── #>  #> ℹ Created formula for fitting prognostic model as: Y ~ . #> ℹ Fitting learners #> • mod_mars #> • mod_lm #> • mod_gbt #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 1 of 3 resampling: mod_mars #> ✔ 1 of 3 resampling: mod_mars (129ms) #> i\tNo tuning parameters. `fit_resamples()` will be attempted #> i 2 of 3 resampling: mod_lm #> ✔ 2 of 3 resampling: mod_lm (92ms) #> i 3 of 3 tuning:     mod_gbt #> ✔ 3 of 3 tuning:     mod_gbt (918ms) #> ℹ Model with lowest RMSE: mod_gbt #> ℹ Investigate trained learners and fitted model in `prognostic_info` list element #> ℹ Setting the group allocation probability `group_allocation_prob` as the mean of column `A` in data: 0.43 #>  #> ── Symbolic differentiation of estimand function ── #>  #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi0' as: '[1] -1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv0` #> ℹ Symbolically deriving partial derivative of the function 'psi1 - psi0' with respect to 'psi1' as: '[1] 1'. #> • Alternatively, specify the derivative through the argument #> `estimand_fun_deriv1`"},{"path":[]},{"path":"https://nnpackages.github.io/PostCard/news/index.html","id":"version-development-version-development-version","dir":"Changelog","previous_headings":"","what":"Version 1.0.0.9000 (development version)","title":"PostCard (development version)","text":"Removed lot functionalities specific simulation data added functionalities specific prognostic covariate adjustment. includes addition funcions: - rctglm - rctglm_with_prognosticscore - fit_best_learner","code":""},{"path":"https://nnpackages.github.io/PostCard/news/index.html","id":"version-development-version-development-version-1","dir":"Changelog","previous_headings":"","what":"Version 0.2.0.9000 (development version)","title":"PostCard (development version)","text":"Added function simulate_collection takes function arguments simulate covariates model outcome historical “current” data give user full flexibility. sim.lm simulates data multivariate normal distribution models outcome linear model now wrapper simulate_collection.","code":""},{"path":"https://nnpackages.github.io/PostCard/news/index.html","id":"version-development-version","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"PostCard (development version)","text":"Package functions simulate analyse data specific case multivariate normal distribution covariates linear model outcome.","code":""}]
